diff -urN openjdk.orig/j2se/src/share/classes/sun/java2d/SurfaceData.java openjdk/j2se/src/share/classes/sun/java2d/SurfaceData.java
--- openjdk.orig/j2se/src/share/classes/sun/java2d/SurfaceData.java	2007-07-20 03:33:16.000000000 -0400
+++ openjdk/j2se/src/share/classes/sun/java2d/SurfaceData.java	2007-07-19 17:38:39.000000000 -0400
@@ -509,6 +509,7 @@
 		// assert(sg2d.surfaceData == this);
 	    }
 	} else if (sg2d.compositeState == sg2d.COMP_CUSTOM) {
+/*
 	    if (sg2d.antialiasHint == SunHints.INTVAL_ANTIALIAS_ON) {
 		if (sg2d.clipState == sg2d.CLIP_SHAPE) {
 		    sg2d.drawpipe = AAClipCompViaShape;
@@ -522,6 +523,7 @@
 		    sg2d.textpipe = compText;
 		}
 	    } else {
+*/
 		sg2d.drawpipe = compViaShape;
 		sg2d.fillpipe = compViaShape;
 		sg2d.shapepipe = compShape;
@@ -530,7 +532,7 @@
 		} else {
 		    sg2d.textpipe = compText;
 		}
-	    }
+/*	    }
 	} else if (sg2d.antialiasHint == SunHints.INTVAL_ANTIALIAS_ON) {
             sg2d.alphafill = getMaskFill(sg2d);
             // assert(sg2d.surfaceData == this);
@@ -549,7 +551,7 @@
                     {
                         sg2d.textpipe = colorText;
                     } else {
-                        sg2d.textpipe = getTextPipe(sg2d, true /* AA==ON */);
+                        sg2d.textpipe = getTextPipe(sg2d, true /* AA==ON *);
                     }
                 }
             } else {
@@ -565,6 +567,7 @@
 		    sg2d.textpipe = paintText;
 		}
 	    }
+*/
 	} else if (sg2d.paintState > sg2d.PAINT_ALPHACOLOR ||
                    sg2d.compositeState > sg2d.COMP_ISCOPY ||
                    sg2d.clipState == sg2d.CLIP_SHAPE)
diff -urN openjdk.orig/j2se/src/share/classes/sun/font/FontStrikeDesc.java openjdk/j2se/src/share/classes/sun/font/FontStrikeDesc.java
--- openjdk.orig/j2se/src/share/classes/sun/font/FontStrikeDesc.java	2007-07-20 03:33:07.000000000 -0400
+++ openjdk/j2se/src/share/classes/sun/font/FontStrikeDesc.java	2007-07-24 11:22:57.000000000 -0400
@@ -110,10 +110,10 @@
      * must therefore include device and font transforms.
      */
     public static int getAAHintIntVal(Object aa, Font2D font2D, int ptSize) {
-	if (aa == VALUE_TEXT_ANTIALIAS_OFF ||
-	    aa == VALUE_TEXT_ANTIALIAS_DEFAULT) {
+	if (aa == VALUE_TEXT_ANTIALIAS_OFF) {
 	    return INTVAL_TEXT_ANTIALIAS_OFF;
-	} else if (aa == VALUE_TEXT_ANTIALIAS_ON) {
+	} else if (aa == VALUE_TEXT_ANTIALIAS_ON ||
+		   aa == VALUE_TEXT_ANTIALIAS_DEFAULT) {
 	    return INTVAL_TEXT_ANTIALIAS_ON;
 	} else if (aa == VALUE_TEXT_ANTIALIAS_GASP) {
 	    if (font2D.useAAForPtSize(ptSize)) {
@@ -128,7 +128,7 @@
 		   aa == VALUE_TEXT_ANTIALIAS_LCD_VBGR) {
 	    return INTVAL_TEXT_ANTIALIAS_LCD_VRGB;
 	} else {
-	    return INTVAL_TEXT_ANTIALIAS_OFF;
+	    return INTVAL_TEXT_ANTIALIAS_ON;
 	}
     }
 
@@ -142,10 +142,10 @@
     public static int getAAHintIntVal(Font2D font2D, Font font,
 				      FontRenderContext frc) {
 	Object aa = frc.getAntiAliasingHint();
-	if (aa == VALUE_TEXT_ANTIALIAS_OFF ||
-	    aa == VALUE_TEXT_ANTIALIAS_DEFAULT) {
+	if (aa == VALUE_TEXT_ANTIALIAS_OFF) {
 	    return INTVAL_TEXT_ANTIALIAS_OFF;
-	} else if (aa == VALUE_TEXT_ANTIALIAS_ON) {
+	} else if (aa == VALUE_TEXT_ANTIALIAS_ON ||
+		   aa == VALUE_TEXT_ANTIALIAS_DEFAULT) {
 	    return INTVAL_TEXT_ANTIALIAS_ON;
 	} else if (aa == VALUE_TEXT_ANTIALIAS_GASP) {
 	    /* FRC.isIdentity() would have been useful */
@@ -184,7 +184,7 @@
 		   aa == VALUE_TEXT_ANTIALIAS_LCD_VBGR) {
 	    return INTVAL_TEXT_ANTIALIAS_LCD_VRGB;
 	} else {
-	    return INTVAL_TEXT_ANTIALIAS_OFF;
+	    return INTVAL_TEXT_ANTIALIAS_ON;
 	}
     }
 

