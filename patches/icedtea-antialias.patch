diff -urN openjdk.orig/j2se/src/solaris/classes/sun/java2d/x11/X11SurfaceData.java openjdk/j2se/src/solaris/classes/sun/java2d/x11/X11SurfaceData.java
--- openjdk.orig/j2se/src/solaris/classes/sun/java2d/x11/X11SurfaceData.java	2007-07-20 03:34:01.000000000 -0400
+++ openjdk/j2se/src/solaris/classes/sun/java2d/x11/X11SurfaceData.java	2007-07-24 10:54:35.000000000 -0400
@@ -297,7 +297,7 @@
 	    } else {
 		switch (sg2d.textAntialiasHint) {
 
-		case SunHints.INTVAL_TEXT_ANTIALIAS_DEFAULT:
+//		case SunHints.INTVAL_TEXT_ANTIALIAS_DEFAULT:
 		    /* equating to OFF which it is for us */
 		case SunHints.INTVAL_TEXT_ANTIALIAS_OFF:
 		    // Use X11 pipe even if DGA is available since DGA
@@ -309,6 +309,7 @@
 		    }
 		    break;
 
+		case SunHints.INTVAL_TEXT_ANTIALIAS_DEFAULT:
 		case SunHints.INTVAL_TEXT_ANTIALIAS_ON:
 		    // Remind: may use Xrender for these when composite is
 		    // copy as above, or if remote X11.
@@ -318,10 +319,12 @@
 		default:
 		    switch (sg2d.getFontInfo().aaHint) {
 
+/*
 		    case SunHints.INTVAL_TEXT_ANTIALIAS_LCD_HRGB:
 		    case SunHints.INTVAL_TEXT_ANTIALIAS_LCD_VRGB:
 			sg2d.textpipe = lcdTextRenderer;
 			break;
+*/
  
 		    case SunHints.INTVAL_TEXT_ANTIALIAS_OFF:
 		    // Use X11 pipe even if DGA is available since DGA
@@ -334,11 +337,13 @@
 		    break;
 
 		    case SunHints.INTVAL_TEXT_ANTIALIAS_ON:
+		    default:
 			sg2d.textpipe = aaTextRenderer;
 			break;
-
+/*
 		    default:
 			sg2d.textpipe = solidTextRenderer;
+*/
 		    }
 		}
 	    }
diff -urN openjdk.orig/j2se/src/share/classes/sun/java2d/SunGraphics2D.java openjdk/j2se/src/share/classes/sun/java2d/SunGraphics2D.java
--- openjdk.orig/j2se/src/share/classes/sun/java2d/SunGraphics2D.java	2007-07-20 03:33:16.000000000 -0400
+++ openjdk/j2se/src/share/classes/sun/java2d/SunGraphics2D.java	2007-07-24 11:20:17.000000000 -0400
@@ -640,11 +640,11 @@
 	    aahint = ((SunHints.Value)frc.getAntiAliasingHint()).getIndex();
 	}
 	if (aahint == SunHints.INTVAL_TEXT_ANTIALIAS_DEFAULT) {
-	    if (antialiasHint == SunHints.INTVAL_ANTIALIAS_ON) {
+//	    if (antialiasHint == SunHints.INTVAL_ANTIALIAS_OFF) {
+//		aahint = SunHints.INTVAL_TEXT_ANTIALIAS_OFF;
+//	    } else {
 		aahint = SunHints.INTVAL_TEXT_ANTIALIAS_ON;
-	    } else {
-		aahint = SunHints.INTVAL_TEXT_ANTIALIAS_OFF;
-	    }
+//	    }
 	} else {
 	    /* If we are in checkFontInfo because a rendering hint has been
 	     * set then all pipes are revalidated. But we can also
diff -urN openjdk.orig/j2se/src/share/classes/sun/java2d/SurfaceData.java openjdk/j2se/src/share/classes/sun/java2d/SurfaceData.java
--- openjdk.orig/j2se/src/share/classes/sun/java2d/SurfaceData.java	2007-07-20 03:33:16.000000000 -0400
+++ openjdk/j2se/src/share/classes/sun/java2d/SurfaceData.java	2007-07-19 17:38:39.000000000 -0400
@@ -511,6 +511,7 @@
 		// assert(sg2d.surfaceData == this);
 	    }
 	} else if (sg2d.compositeState == sg2d.COMP_CUSTOM) {
+/*
 	    if (sg2d.antialiasHint == SunHints.INTVAL_ANTIALIAS_ON) {
 		if (sg2d.clipState == sg2d.CLIP_SHAPE) {
 		    sg2d.drawpipe = AAClipCompViaShape;
@@ -524,6 +525,7 @@
 		    sg2d.textpipe = compText;
 		}
 	    } else {
+*/
 		sg2d.drawpipe = compViaShape;
 		sg2d.fillpipe = compViaShape;
 		sg2d.shapepipe = compShape;
@@ -532,7 +534,7 @@
 		} else {
 		    sg2d.textpipe = compText;
 		}
-	    }
+/*	    }
 	} else if (sg2d.antialiasHint == SunHints.INTVAL_ANTIALIAS_ON) {
             sg2d.alphafill = getMaskFill(sg2d);
             // assert(sg2d.surfaceData == this);
@@ -561,6 +563,7 @@
 		    sg2d.textpipe = paintText;
 		}
 	    }
+*/
 	} else if (sg2d.paintState > sg2d.PAINT_ALPHACOLOR ||
                    sg2d.compositeState > sg2d.COMP_ISCOPY ||
                    sg2d.clipState == sg2d.CLIP_SHAPE)
@@ -600,17 +603,19 @@
 	     * resolve one of the new AA types.
 	     */
 	    switch (sg2d.textAntialiasHint) {
-	    case SunHints.INTVAL_TEXT_ANTIALIAS_DEFAULT:
-		/* equating to OFF which it is for us */
+//	    case SunHints.INTVAL_TEXT_ANTIALIAS_DEFAULT:
+//		/* equating to OFF which it is for us */
 	    case SunHints.INTVAL_TEXT_ANTIALIAS_OFF:
 		sg2d.textpipe = solidTextRenderer;
 		break;
 
+	    case SunHints.INTVAL_TEXT_ANTIALIAS_DEFAULT:
 	    case SunHints.INTVAL_TEXT_ANTIALIAS_ON:
+	    default:
 		sg2d.textpipe = aaTextRenderer;
 		break;
 
-	    default:
+/*	    default:
 		switch (sg2d.getFontInfo().aaHint) {
 
 		case SunHints.INTVAL_TEXT_ANTIALIAS_LCD_HRGB:
@@ -625,6 +630,7 @@
 		default:
 		sg2d.textpipe = solidTextRenderer;
 		}
+*/
 	    }
 	    sg2d.shapepipe = colorPrimitives;
 	    sg2d.loops = getRenderLoops(sg2d);

diff -urN openjdk.orig/j2se/src/share/classes/sun/font/FontStrikeDesc.java openjdk/j2se/src/share/classes/sun/font/FontStrikeDesc.java
--- openjdk.orig/j2se/src/share/classes/sun/font/FontStrikeDesc.java	2007-07-20 03:33:07.000000000 -0400
+++ openjdk/j2se/src/share/classes/sun/font/FontStrikeDesc.java	2007-07-24 11:22:57.000000000 -0400
@@ -110,10 +110,10 @@
      * must therefore include device and font transforms.
      */
     public static int getAAHintIntVal(Object aa, Font2D font2D, int ptSize) {
-	if (aa == VALUE_TEXT_ANTIALIAS_OFF ||
-	    aa == VALUE_TEXT_ANTIALIAS_DEFAULT) {
+	if (aa == VALUE_TEXT_ANTIALIAS_OFF) {
 	    return INTVAL_TEXT_ANTIALIAS_OFF;
-	} else if (aa == VALUE_TEXT_ANTIALIAS_ON) {
+	} else if (aa == VALUE_TEXT_ANTIALIAS_ON ||
+		   aa == VALUE_TEXT_ANTIALIAS_DEFAULT) {
 	    return INTVAL_TEXT_ANTIALIAS_ON;
 	} else if (aa == VALUE_TEXT_ANTIALIAS_GASP) {
 	    if (font2D.useAAForPtSize(ptSize)) {
@@ -128,7 +128,7 @@
 		   aa == VALUE_TEXT_ANTIALIAS_LCD_VBGR) {
 	    return INTVAL_TEXT_ANTIALIAS_LCD_VRGB;
 	} else {
-	    return INTVAL_TEXT_ANTIALIAS_OFF;
+	    return INTVAL_TEXT_ANTIALIAS_ON;
 	}
     }
 
@@ -142,10 +142,10 @@
     public static int getAAHintIntVal(Font2D font2D, Font font,
 				      FontRenderContext frc) {
 	Object aa = frc.getAntiAliasingHint();
-	if (aa == VALUE_TEXT_ANTIALIAS_OFF ||
-	    aa == VALUE_TEXT_ANTIALIAS_DEFAULT) {
+	if (aa == VALUE_TEXT_ANTIALIAS_OFF) {
 	    return INTVAL_TEXT_ANTIALIAS_OFF;
-	} else if (aa == VALUE_TEXT_ANTIALIAS_ON) {
+	} else if (aa == VALUE_TEXT_ANTIALIAS_ON ||
+		   aa == VALUE_TEXT_ANTIALIAS_DEFAULT) {
 	    return INTVAL_TEXT_ANTIALIAS_ON;
 	} else if (aa == VALUE_TEXT_ANTIALIAS_GASP) {
 	    /* FRC.isIdentity() would have been useful */
@@ -184,7 +184,7 @@
 		   aa == VALUE_TEXT_ANTIALIAS_LCD_VBGR) {
 	    return INTVAL_TEXT_ANTIALIAS_LCD_VRGB;
 	} else {
-	    return INTVAL_TEXT_ANTIALIAS_OFF;
+	    return INTVAL_TEXT_ANTIALIAS_ON;
 	}
     }
 

