# HG changeset patch
# User ceisserer
# Date 1224781905 -7200
# Node ID 0ae86de6889ebd18b1a8f0232c50ce2c3049bc40
# Parent  d6ab5f9f96efa37a823e071a27e3555557930203
Updated Symbol-Mapping files

diff -r d6ab5f9f96ef -r 0ae86de6889e make/sun/awt/mapfile-mawt-vers
--- openjdk/jdk/make/sun/awt/mapfile-mawt-vers	Thu Oct 23 17:25:18 2008 +0200
+++ openjdk/jdk/make/sun/awt/mapfile-mawt-vers	Thu Oct 23 19:11:45 2008 +0200
@@ -438,6 +438,7 @@
 		Java_sun_java2d_xr_XRSurfaceData_XRResetPaint;
 		Java_sun_java2d_xr_XRSurfaceData_XRSetRepeat;
 		Java_sun_java2d_xr_XRPMBlitLoops_nativeRenderBlit;
+                Java_sun_java2d_xr_XRPMBlitLoops_nativeTransformedRenderBlit;
 		Java_sun_java2d_xr_XRRenderer_XRFillRect;
 		Java_sun_java2d_xr_XRRenderer_XRFillSpans;
 		Java_sun_java2d_xr_XRRenderer_XRDoPath;
diff -r d6ab5f9f96ef -r 0ae86de6889e make/sun/xawt/mapfile-vers
--- openjdk/jdk/make/sun/xawt/mapfile-vers	Thu Oct 23 17:25:18 2008 +0200
+++ openjdk/jdk/make/sun/xawt/mapfile-vers	Thu Oct 23 19:11:45 2008 +0200
@@ -367,6 +367,7 @@
         Java_sun_java2d_xr_XRSurfaceData_XRResetPaint;
         Java_sun_java2d_xr_XRSurfaceData_XRSetRepeat;
 	Java_sun_java2d_xr_XRPMBlitLoops_nativeRenderBlit;
+        Java_sun_java2d_xr_XRPMBlitLoops_nativeTransformedRenderBlit;
 	Java_sun_java2d_xr_XRRenderer_XRFillRect;
 	Java_sun_java2d_xr_XRRenderer_XRFillSpans;
         Java_sun_java2d_xr_XRRenderer_XRDoPath;
diff -r d6ab5f9f96ef -r 0ae86de6889e src/solaris/classes/sun/java2d/xr/XRPMBlitLoops.java
--- openjdk/jdk/src/solaris/classes/sun/java2d/xr/XRPMBlitLoops.java	Thu Oct 23 17:25:18 2008 +0200
+++ openjdk/jdk/src/solaris/classes/sun/java2d/xr/XRPMBlitLoops.java	Thu Oct 23 19:11:45 2008 +0200
@@ -31,6 +31,7 @@
 import sun.java2d.SurfaceData;
 import java.awt.*;
 import java.awt.geom.*;
+import java.awt.image.*;
 
 /**
  * XRPMBlitLoops
@@ -38,7 +39,7 @@
  * This class accelerates Blits between two surfaces of types *PM.s
  */
 public class XRPMBlitLoops {
-
+    
     public static void register() {
 	GraphicsPrimitive[] primitives = {
 
@@ -90,15 +91,32 @@
 	super(srcType, CompositeType.AnyAlpha, dstType);
     }
     
+    /*
+     * TODO:  This breaks scales with non-integer coordinates!
+     */
     public void Scale(SurfaceData src, SurfaceData dst, Composite comp, Region clip, int sx1, int sy1, int sx2, int sy2, double dx1, double dy1,
 	    double dx2, double dy2) {
 	try {
 	    SunToolkit.awtLock();
-
+	    
+//	    int width = sx2-sx1;
+//	    int height = sy2-sy1;
+//	    double xScale = (dx2 - dx1) / width;
+//	    double yScale = (dy2 - dy1) / height;
+//	    AffineTransform scaleTransform = AffineTransform.getTranslateInstance(sx1, sy1);
+//	    scaleTransform.scale(xScale, yScale);
+//	   // scaleTransform.translate(sx1, sy1);
+//	    
+//	    /*
+//             *    static void IsoBlit(SurfaceData src, SurfaceData dst, Composite comp, Region clip, AffineTransform xform, int hint, 
+//             *    int srcx, int srcy, int dstx, int dsty, int width, int height)
+//	     */
+//	    XRPMBlitLoops.IsoBlit(src, dst, comp, clip, scaleTransform, AffineTransformOp.TYPE_NEAREST_NEIGHBOR, 0, 0, (int)(dx1/xScale), (int)(dy1/yScale), width, height);
+////
 	    XRSurfaceData x11sdDst = (XRSurfaceData) dst;
 	    x11sdDst.validate(clip, comp, null, null, null, 0);
 	    XRSurfaceData x11sdSrc = (XRSurfaceData) src;
-
+	    
 	    double xScale = (dx2 - dx1) / (sx2 - sx1);
 	    double yScale = (dy2 - dy1) / (sy2 - sy1);
 
@@ -110,8 +128,7 @@
 	    AffineTransform xForm = AffineTransform.getScaleInstance(1 / xScale, 1 / yScale);
 
 	    x11sdSrc.validateAsSource(xForm, XRUtils.RepeatNone, XRUtils.FAST);
-
-	    /*TODO: This breaks non-integer scaled images*/
+	    
 	    XRPMBlitLoops.nativeRenderBlit(src.getNativeOps(), dst.getNativeOps(), (int) sx1, (int) sy1, (int) dx1, (int) dy1, (int) (dx2 - dx1),
 		    (int) (dy2 - dy1));
 
@@ -127,11 +144,12 @@
  * @author Clemens Eisserer
  */
 class X11PMTransformedBlit extends TransformBlit {
+    
+    static int lastMaskWidth = 0, lastMaskHeight = 0;
+    
     public X11PMTransformedBlit(SurfaceType srcType, SurfaceType dstType) {
 	super(srcType, CompositeType.AnyAlpha, dstType);
     }
-
-    static int lastMaskWidth = 0, lastMaskHeight = 0;
 
     /**
      * Possible optimizations: 
@@ -145,7 +163,6 @@
 	    int dstx, int dsty, int width, int height) {
 	try {
 	    SunToolkit.awtLock();
-
 	    int xrInterpolationType = XRUtils.ATransOpToXRQuality(hint);
 
 	    XRSurfaceData x11sdDst = (XRSurfaceData) dst;
@@ -198,12 +215,11 @@
 		XRPMBlitLoops.nativeTransformedRenderBlit(src.getNativeOps(), dst.getNativeOps(), 0, 0, bounds.x, bounds.y, bounds.width,
 			bounds.height, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0);
 	    }
-
 	} finally {
 	    SunToolkit.awtUnlock();
 	}
     }
-
+    
     protected static boolean isMaskOmittable(AffineTransform trx, Composite comp, int interpolation) {
 	return (interpolation <= XRUtils.FAST || trx.getTranslateX() == (int) trx.getTranslateX() /*
 												     * If
