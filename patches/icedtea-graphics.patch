diff -urN openjdk.orig/j2se/src/share/native/sun/java2d/cmm/lcms/LCMS.c openjdk/j2se/src/share/native/sun/java2d/cmm/lcms/LCMS.c
--- openjdk.orig/j2se/src/share/native/sun/java2d/cmm/lcms/LCMS.c	2007-05-24 03:44:01.000000000 -0400
+++ openjdk/j2se/src/share/native/sun/java2d/cmm/lcms/LCMS.c	2007-06-18 15:45:29.000000000 -0400
@@ -505,7 +505,7 @@
     IL_offset_fID = (*env)->GetFieldID (env, IL, "offset", "I");
     IL_nextRowOffset_fID = (*env)->GetFieldID (env, IL, "nextRowOffset", "I");
 
-    PF_ID_fID = (*env)->GetFieldID (env, Pf, "ID", "J");
+    PF_ID_fID = (*env)->GetFieldID (env, Pf, "profileID", "J");
 }
 

diff -urN openjdk.orig/j2se/src/share/classes/sun/awt/image/SunWritableRaster.java openjdk/j2se/src/share/classes/sun/awt/image/SunWritableRaster.java
--- openjdk.orig/j2se/src/share/classes/sun/awt/image/SunWritableRaster.java	2007-05-24 03:43:08.000000000 -0400
+++ openjdk/j2se/src/share/classes/sun/awt/image/SunWritableRaster.java	2007-06-22 10:19:53.000000000 -0400
@@ -56,50 +56,56 @@
         public StateTrackableDelegate getTrackable(DataBuffer db);
     }
 
+/*
     public static void setDataStealer(DataStealer ds) {
         if (stealer != null) {
 	    throw new InternalError("Attempt to set DataStealer twice");
         }
         stealer = ds;
     }
+*/
 
     public static byte[] stealData(DataBufferByte dbb, int bank) {
-        return stealer.getData(dbb, bank);
+//        return stealer.getData(dbb, bank);
+	return dbb.getData(bank);
     }
 
     public static short[] stealData(DataBufferUShort dbus, int bank) {
-        return stealer.getData(dbus, bank);
+//        return stealer.getData(dbus, bank);
+	return dbus.getData(bank);
     }
 
     public static int[] stealData(DataBufferInt dbi, int bank) {
-        return stealer.getData(dbi, bank);
+//        return stealer.getData(dbi, bank);
+	return dbi.getData(bank);
     }
 
     public static StateTrackableDelegate stealTrackable(DataBuffer db) {
-        return stealer.getTrackable(db);
+//        return stealer.getTrackable(db);
+	return StateTrackableDelegate.UNTRACKABLE_DELEGATE;
     }
 
     public static void markDirty(DataBuffer db) {
-        stealer.getTrackable(db).markDirty();
+//        stealer.getTrackable(db).markDirty();
     }
 
     public static void markDirty(WritableRaster wr) {
-        if (wr instanceof SunWritableRaster) {
-            ((SunWritableRaster) wr).markDirty();
-        } else {
-            markDirty(wr.getDataBuffer());
-        }
+//        if (wr instanceof SunWritableRaster) {
+//            ((SunWritableRaster) wr).markDirty();
+//        } else {
+//            markDirty(wr.getDataBuffer());
+//        }
     }
 
     public static void markDirty(Image img) {
-        SurfaceData.getPrimarySurfaceData(img).markDirty();
+//        SurfaceData.getPrimarySurfaceData(img).markDirty();
     }
 
     private StateTrackableDelegate theTrackable;
 
     public SunWritableRaster(SampleModel sampleModel, Point origin) {
         super(sampleModel, origin);
-        theTrackable = stealTrackable(dataBuffer);
+//        theTrackable = stealTrackable(dataBuffer);
     }
 
     public SunWritableRaster(SampleModel sampleModel,
@@ -107,7 +113,7 @@
                              Point origin) 
     {
         super(sampleModel, dataBuffer, origin);
-        theTrackable = stealTrackable(dataBuffer);
+//        theTrackable = stealTrackable(dataBuffer);
     }
 
     public SunWritableRaster(SampleModel sampleModel,
@@ -117,13 +123,13 @@
                              WritableRaster parent)
     {
         super(sampleModel, dataBuffer, aRegion, sampleModelTranslate, parent);
-        theTrackable = stealTrackable(dataBuffer);
+//        theTrackable = stealTrackable(dataBuffer);
     }
 
     /**
      * Mark the TrackableDelegate of the associated DataBuffer dirty.
      */
     public final void markDirty() {
-        theTrackable.markDirty();
+//        theTrackable.markDirty();
     }
 }
diff -urN openjdk.orig/j2se/src/share/native/sun/awt/image/imageInitIDs.c openjdk/j2se/src/share/native/sun/awt/image/imageInitIDs.c
--- openjdk.orig/j2se/src/share/native/sun/awt/image/imageInitIDs.c	2007-07-20 03:33:46.000000000 -0400
+++ openjdk/j2se/src/share/native/sun/awt/image/imageInitIDs.c	2007-07-25 15:54:54.000000000 -0400
@@ -143,7 +143,7 @@
                                                          jclass cls) {
     g_SPPSMmaskArrID = (*env)->GetFieldID(env, cls, "bitMasks", "[I");
     g_SPPSMmaskOffID = (*env)->GetFieldID(env, cls, "bitOffsets", "[I");
-    g_SPPSMnBitsID   = (*env)->GetFieldID(env, cls, "bitSizes", "[I");
+    g_SPPSMnBitsID   = (*env)->GetFieldID(env, cls, "sampleSize", "[I");
     g_SPPSMmaxBitID  = (*env)->GetFieldID(env, cls, "maxBitSize", "I");
 
     if (g_SPPSMmaskArrID == NULL || g_SPPSMmaskOffID == NULL ||
@@ -229,11 +229,3 @@
     }
 }
 
-JNIEXPORT void JNICALL
-Java_java_awt_image_DataBufferInt_initIDs(JNIEnv *env, jclass cls) {
-    g_DataBufferIntPdataID = (*env)->GetFieldID(env, cls, "pData", "J");
-    if (g_DataBufferIntPdataID == NULL) {
-        JNU_ThrowNullPointerException(env, "Unable to grab DataBufferInt.pData");
-        return;
-    }
-}
diff -urN openjdk.orig/j2se/src/share/native/sun/awt/image/imageInitIDs.h openjdk/j2se/src/share/native/sun/awt/image/imageInitIDs.h
--- openjdk.orig/j2se/src/share/native/sun/awt/image/imageInitIDs.h	2007-07-20 03:33:46.000000000 -0400
+++ openjdk/j2se/src/share/native/sun/awt/image/imageInitIDs.h	2007-07-25 15:55:05.000000000 -0400
@@ -120,7 +120,4 @@
 IMGEXTERN jfieldID g_KernelYOriginD;
 IMGEXTERN jfieldID g_KernelDataID;
 
-/* DataBufferInt ids */
-IMGEXTERN jfieldID g_DataBufferIntPdataID;
-
 #endif /* IMAGEINITIDS_H */
--- openjdk.orig/j2se/src/solaris/classes/sun/awt/X11/XPanelPeer.java	2007-07-20 03:33:58.000000000 -0400
+++ openjdk/j2se/src/solaris/classes/sun/awt/X11/XPanelPeer.java	2007-07-31 09:57:27.000000000 -0400
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2007 Sun Microsystems, Inc.  All Rights Reserved.
+ * Copyright 2002-2004 Sun Microsystems, Inc.  All Rights Reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -26,7 +26,6 @@
 
 import java.awt.*;
 import java.awt.peer.*;
-
 import sun.awt.SunGraphicsCallback;
 
 public class XPanelPeer extends XCanvasPeer implements PanelPeer {
@@ -130,36 +129,41 @@
 	return getInsets();
     }
 
-    /*
-     * This method is called from XWindowPeer.displayChanged, when
-     * the window this Panel is on is moved to the new screen, or
-     * display mode is changed.
-     *
-     * The notification is propagated to the child Canvas components.
-     * Top-level windows and other Panels are notified too as their
-     * peers are subclasses of XCanvasPeer. 
+    /**
+     * Recursive method that handles the propagation of the displayChanged
+     * event into the entire hierarchy of peers.
+     * Unlike on win32, on X we don't worry about handling on-the-fly
+     * display settings changes, only windows being dragged across Xinerama
+     * screens.  Thus, we only need to tell XCanvasPeers, not all
+     * XComponentPeers.
      */
-    public void displayChanged(int screenNum) {
-        super.displayChanged(screenNum);
-        displayChanged((Container)target, screenNum);
+    private void recursiveDisplayChanged(Component c, int screenNum) {
+        if (c instanceof Container) {
+            Component children[] = ((Container)c).getComponents();
+            for (int i = 0; i < children.length; ++i) {
+                recursiveDisplayChanged(children[i], screenNum);
+            }
+        }
+        ComponentPeer peer = c.getPeer();
+        if (peer != null && peer instanceof XCanvasPeer) {
+            XCanvasPeer mPeer = (XCanvasPeer)peer;
+            mPeer.displayChanged(screenNum);
+        }
     }
 
     /*
-     * Recursively iterates through all the HW and LW children
-     * of the container and calls displayChanged() for HW peers.
-     * Iteration through children peers only is not enough as the
-     * displayChanged notification may not be propagated to HW
-     * components inside LW containers, see 4452373 for details.
+     * Often up-called from a XWindowPeer instance.
+     * Calls displayChanged() on all child canvas' peers.
+     * Recurses into Container children to ensure all canvases
+     * get the message.
      */
-    private static void displayChanged(Container target, int screenNum) {
+    public void displayChanged(int screenNum) {
+        // Don't do super call because XWindowPeer has already updated its GC
+
         Component children[] = ((Container)target).getComponents();
-        for (Component child : children) {
-            ComponentPeer cpeer = child.getPeer();
-            if (cpeer instanceof XCanvasPeer) {
-                ((XCanvasPeer)cpeer).displayChanged(screenNum);
-            } else if (child instanceof Container) {
-                displayChanged((Container)child, screenNum);
-            }
+        
+        for (int i = 0; i < children.length; i++) {
+            recursiveDisplayChanged(children[i], screenNum);
         }
     }
 
