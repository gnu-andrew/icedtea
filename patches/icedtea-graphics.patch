diff -urN openjdk.orig/jdk/src/share/native/sun/awt/image/imageInitIDs.h openjdk/jdk/src/share/native/sun/awt/image/imageInitIDs.h
--- openjdk.orig/jdk/src/share/native/sun/awt/image/imageInitIDs.h	2007-07-20 03:33:46.000000000 -0400
+++ openjdk/jdk/src/share/native/sun/awt/image/imageInitIDs.h	2007-07-25 15:55:05.000000000 -0400
@@ -120,7 +120,4 @@
 IMGEXTERN jfieldID g_KernelYOriginD;
 IMGEXTERN jfieldID g_KernelDataID;
 
-/* DataBufferInt ids */
-IMGEXTERN jfieldID g_DataBufferIntPdataID;
-
 #endif /* IMAGEINITIDS_H */
--- iopenjdkb23/openjdk/jdk/src/share/native/sun/java2d/cmm/lcms/LCMS.c	2007-10-30 04:38:58.000000000 -0400
+++ openjdk/jdk/src/share/native/sun/java2d/cmm/lcms/LCMS.c	2007-11-13 12:43:26.000000000 -0500
@@ -505,5 +505,5 @@
     IL_offset_fID = (*env)->GetFieldID (env, IL, "offset", "I");
     IL_nextRowOffset_fID = (*env)->GetFieldID (env, IL, "nextRowOffset", "I");
 
-    PF_ID_fID = (*env)->GetFieldID (env, Pf, "ID", "J");
+    PF_ID_fID = (*env)->GetFieldID (env, Pf, "profileID", "J");
 }
--- iopenjdkb23/openjdk/jdk/src/share/classes/sun/awt/image/SunWritableRaster.java	2007-10-30 04:37:17.000000000 -0400
+++ openjdk/jdk/src/share/classes/sun/awt/image/SunWritableRaster.java	2007-11-13 12:47:25.000000000 -0500
@@ -55,51 +55,48 @@
         public int[] getData(DataBufferInt dbi, int bank);
         public StateTrackableDelegate getTrackable(DataBuffer db);
     }
-
+/*
     public static void setDataStealer(DataStealer ds) {
         if (stealer != null) {
             throw new InternalError("Attempt to set DataStealer twice");
         }
         stealer = ds;
     }
-
+*/
     public static byte[] stealData(DataBufferByte dbb, int bank) {
-        return stealer.getData(dbb, bank);
+//        return stealer.getData(dbb, bank);
+    	  return dbb.getData(bank);  
     }
 
     public static short[] stealData(DataBufferUShort dbus, int bank) {
-        return stealer.getData(dbus, bank);
+//        return stealer.getData(dbus, bank);
+	  return dbus.getData(bank);        
     }
 
     public static int[] stealData(DataBufferInt dbi, int bank) {
-        return stealer.getData(dbi, bank);
+//        return stealer.getData(dbi, bank);
+	  return dbi.getData(bank);
     }
 
     public static StateTrackableDelegate stealTrackable(DataBuffer db) {
-        return stealer.getTrackable(db);
+//        return stealer.getTrackable(db);
+	  return StateTrackableDelegate.UNTRACKABLE_DELEGATE;	          
     }
 
     public static void markDirty(DataBuffer db) {
-        stealer.getTrackable(db).markDirty();
+//        stealer.getTrackable(db).markDirty();
     }
 
     public static void markDirty(WritableRaster wr) {
-        if (wr instanceof SunWritableRaster) {
-            ((SunWritableRaster) wr).markDirty();
-        } else {
-            markDirty(wr.getDataBuffer());
-        }
     }
 
     public static void markDirty(Image img) {
-        SurfaceData.getPrimarySurfaceData(img).markDirty();
     }
 
     private StateTrackableDelegate theTrackable;
 
     public SunWritableRaster(SampleModel sampleModel, Point origin) {
         super(sampleModel, origin);
-        theTrackable = stealTrackable(dataBuffer);
     }
 
     public SunWritableRaster(SampleModel sampleModel,
@@ -107,7 +104,6 @@
                              Point origin)
     {
         super(sampleModel, dataBuffer, origin);
-        theTrackable = stealTrackable(dataBuffer);
     }
 
     public SunWritableRaster(SampleModel sampleModel,
@@ -117,13 +113,11 @@
                              WritableRaster parent)
     {
         super(sampleModel, dataBuffer, aRegion, sampleModelTranslate, parent);
-        theTrackable = stealTrackable(dataBuffer);
     }
 
     /**
      * Mark the TrackableDelegate of the associated DataBuffer dirty.
      */
     public final void markDirty() {
-        theTrackable.markDirty();
     }
 }
--- ../opienjdkb23/openjdk/jdk/src/share/classes/javax/swing/text/WrappedPlainView.java	2007-10-30 04:37:06.000000000 -0400
+++ openjdk/jdk/src/share/classes/javax/swing/text/WrappedPlainView.java	2007-11-13 12:50:52.000000000 -0500
@@ -236,9 +236,6 @@
         Segment segment = SegmentCache.getSharedSegment();
         loadText(segment, p0, p1);
         int currentWidth = getWidth();
-        if (currentWidth == Integer.MAX_VALUE) {
-            currentWidth = (int) getDefaultSpan(View.X_AXIS);
-        }
         if (wordWrap) {
             p = p0 + Utilities.getBreakLocation(segment, metrics,
                                                 tabBase, tabBase + currentWidth,
@@ -324,20 +321,6 @@
         tabSize = getTabSize() * metrics.charWidth('m');
     }
 
-    /**
-     * Return reasonable default values for the view dimensions.  The standard
-     * text terminal size 80x24 is pretty suitable for the wrapped plain view.
-     */
-    private float getDefaultSpan(int axis) {
-         switch (axis) {
-            case View.X_AXIS:
-                return 80 * metrics.getWidths()['M'];
-            case View.Y_AXIS:
-                return 24 * metrics.getHeight();
-            default:
-                throw new IllegalArgumentException("Invalid axis: " + axis);
-        }
-    }
 
     // --- TabExpander methods ------------------------------------------
 
@@ -573,19 +556,16 @@
                 if (width == Integer.MAX_VALUE) {
                     // We have been initially set to MAX_VALUE, but we don't
                     // want this as our preferred.
-                    width = getDefaultSpan(axis);
+                    return 100f;
                 }
                 return width;
             case View.Y_AXIS:
-                if (getDocument().getLength() > 0) {
-                    if ((lineCount < 0) || widthChanging) {
-                        breakLines(getStartOffset());
-                    }
-                    return lineCount * metrics.getHeight();
-                } else {
-                    return getDefaultSpan(axis);
-                }
-            default:
+            	if (lineCount < 0 || widthChanging) {
+                   breakLines(getStartOffset());
+               }
+                int h = lineCount * metrics.getHeight();
+                return h;
+	    default:
                 throw new IllegalArgumentException("Invalid axis: " + axis);
             }
         }
--- ../iopenjdkb23/openjdk/jdk/src/share/native/sun/awt/image/imageInitIDs.c	2007-10-30 04:38:50.000000000 -0400
+++ openjdk/jdk/src/share/native/sun/awt/image/imageInitIDs.c	2007-11-13 12:52:43.000000000 -0500
@@ -143,7 +143,7 @@
                                                          jclass cls) {
     g_SPPSMmaskArrID = (*env)->GetFieldID(env, cls, "bitMasks", "[I");
     g_SPPSMmaskOffID = (*env)->GetFieldID(env, cls, "bitOffsets", "[I");
-    g_SPPSMnBitsID   = (*env)->GetFieldID(env, cls, "bitSizes", "[I");
+    g_SPPSMnBitsID   = (*env)->GetFieldID(env, cls, "sampleSize", "[I");
     g_SPPSMmaxBitID  = (*env)->GetFieldID(env, cls, "maxBitSize", "I");
 
     if (g_SPPSMmaskArrID == NULL || g_SPPSMmaskOffID == NULL ||
@@ -228,12 +228,3 @@
         JNU_ThrowNullPointerException(env, "Unable to grab field ids");
     }
 }
-
-JNIEXPORT void JNICALL
-Java_java_awt_image_DataBufferInt_initIDs(JNIEnv *env, jclass cls) {
-    g_DataBufferIntPdataID = (*env)->GetFieldID(env, cls, "pData", "J");
-    if (g_DataBufferIntPdataID == NULL) {
-        JNU_ThrowNullPointerException(env, "Unable to grab DataBufferInt.pData");
-        return;
-    }
-}
