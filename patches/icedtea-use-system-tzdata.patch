--- openjdk/hotspot/src/os/linux/vm/os_linux.cpp.keiths	2007-10-03 08:39:51.000000000 -0700
+++ openjdk/hotspot/src/os/linux/vm/os_linux.cpp	2007-10-03 08:41:49.000000000 -0700
@@ -391,6 +391,10 @@ void os::init_system_properties_values()
 			       "javax.net.ssl.trustStorePassword",
 			       "");
 
+  // Use the system zoneinfo files, if present
+  Arguments::PropertyList_add (&sp,
+			       "user.zoneinfo.dir", "/usr/share/javazi");
+
 #undef malloc
 #undef getenv
 #undef EXTENSIONS_DIR
--- openjdk/j2se/src/share/classes/sun/util/calendar/ZoneInfoFile.java.keiths	2007-10-03 13:42:51.000000000 -0700
+++ openjdk/j2se/src/share/classes/sun/util/calendar/ZoneInfoFile.java	2007-10-03 13:42:57.000000000 -0700
@@ -30,6 +30,7 @@ import	java.io.FileInputStream;
 import	java.io.FileNotFoundException;
 import	java.io.IOException;
 import	java.lang.ref.SoftReference;
+import	java.security.AccessControlException;
 import	java.security.AccessController;
 import	java.security.PrivilegedAction;
 import	java.security.PrivilegedActionException;
@@ -1021,10 +1022,28 @@ public class ZoneInfoFile {
 	byte[] buffer = null;
 
 	try {
-	    String homeDir = AccessController.doPrivileged(
-		new sun.security.action.GetPropertyAction("java.home"));
-	    final String fname = homeDir + File.separator + "lib" + File.separator
-				 + "zi" + File.separator + fileName;
+	  String zi_dir = (String) AccessController.doPrivileged(new sun.security.action.GetPropertyAction("user.zoneinfo.dir"));
+	    File dir = null;
+	    if (zi_dir != null)
+	      dir = new File(zi_dir);
+
+	    // Some minimal sanity checking
+	    if (dir != null) {
+	      try {
+		File f = new File(dir, "ZoneInfoMappings");
+		if (!f.exists())
+		  dir = null;
+	      } catch (AccessControlException ace) {
+		dir = null;
+	      }
+	    }
+
+	    if (dir == null) {
+	      String homeDir = (String) AccessController.doPrivileged(new sun.security.action.GetPropertyAction("java.home"));
+	      zi_dir = homeDir + File.separator + "lib" + File.separator
+		+ "zi";
+	    }
+	    final String fname =  zi_dir + File.separator + fileName;
 	    buffer = (byte[]) AccessController.doPrivileged(new PrivilegedExceptionAction() {
 		public Object run() throws IOException {
 		    File file = new File(fname);
