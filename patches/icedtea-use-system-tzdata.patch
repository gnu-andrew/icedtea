diff -r 7afa92fca0fd hotspot/src/os/linux/vm/os_linux.cpp
--- openjdk/hotspot/src/os/linux/vm/os_linux.cpp	Thu Sep 27 12:57:09 2007 -0700
+++ openjdk/hotspot/src/os/linux/vm/os_linux.cpp	Thu Sep 27 14:00:27 2007 -0700
@@ -391,6 +391,9 @@ void os::init_system_properties_values()
 			       "javax.net.ssl.trustStorePassword",
 			       "");
 
+  // Use the system zoneinfo files, if present
+  Arguments::PropertyList_add (&sp,
+			       "user.zoneinfo.dir", "/usr/share/javazi");
 #undef malloc
 #undef getenv
 #undef EXTENSIONS_DIR
--- ../openjdk-b21/openjdk/j2se/src/share/classes/sun/util/calendar/ZoneInfoFile.java	2007-09-27 22:30:36.000000000 -0400
+++ openjdk/j2se/src/share/classes/sun/util/calendar/ZoneInfoFile.java	2007-09-28 11:24:52.000000000 -0400
@@ -1021,11 +1021,25 @@
 	byte[] buffer = null;
 
 	try {
-	    String homeDir = AccessController.doPrivileged(
-		new sun.security.action.GetPropertyAction("java.home"));
-	    final String fname = homeDir + File.separator + "lib" + File.separator
-				 + "zi" + File.separator + fileName;
-	    buffer = (byte[]) AccessController.doPrivileged(new PrivilegedExceptionAction() {
+	        String zi_dir = (String) System.getProperty("user.zoneinfo.dir");
+              File dir = null;
+              if (zi_dir != null)
+                dir = new File(zi_dir);
+ 
+              // Some minimal sanity checking
+              if (dir != null) {
+                File f = new File(dir, "ZoneInfoMappings");
+                if (!f.exists())
+                  dir = null;
+               }
+
+               if (dir == null) {
+                  String homeDir = (String) System.getProperty("java.home");
+                  zi_dir = homeDir + File.separator + "lib" + File.separator
+                   + "zi";
+                }
+                final String fname =  zi_dir + File.separator + fileName;
+		buffer = (byte[]) AccessController.doPrivileged(new PrivilegedExceptionAction() {
 		public Object run() throws IOException {
 		    File file = new File(fname);
 		    if (!file.canRead()) {
