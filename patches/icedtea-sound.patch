diff -Nru openjdk.orig/jdk/src/share/classes/com/sun/media/sound/AbstractMidiDevice.java openjdk/jdk/src/share/classes/com/sun/media/sound/AbstractMidiDevice.java
--- openjdk.orig/jdk/src/share/classes/com/sun/media/sound/AbstractMidiDevice.java	2008-11-13 18:27:19.000000000 +0000
+++ openjdk/jdk/src/share/classes/com/sun/media/sound/AbstractMidiDevice.java	2008-11-13 18:27:03.000000000 +0000
@@ -586,7 +586,6 @@
 
         private ArrayList<Transmitter> transmitters = new ArrayList<Transmitter>();
         private MidiOutDevice.MidiOutReceiver midiOutReceiver;
-        private MixerSynth.SynthReceiver mixerSynthReceiver;
 
         // how many transmitters must be present for optimized
         // handling
@@ -621,22 +620,14 @@
                 if (midiOutReceiver == oldR) {
                     midiOutReceiver = null;
                 }
-                if (mixerSynthReceiver == oldR) {
-                    mixerSynthReceiver = null;
-                }
                 if (newR != null) {
                     if ((newR instanceof MidiOutDevice.MidiOutReceiver)
                         && (midiOutReceiver == null)) {
                         midiOutReceiver = ((MidiOutDevice.MidiOutReceiver) newR);
                     }
-                    if ((newR instanceof MixerSynth.SynthReceiver)
-                        && (mixerSynthReceiver == null)) {
-                        mixerSynthReceiver = ((MixerSynth.SynthReceiver) newR);
-                    }
                 }
                 optimizedReceiverCount =
-                      ((midiOutReceiver!=null)?1:0)
-                    + ((mixerSynthReceiver!=null)?1:0);
+		  ((midiOutReceiver!=null)?1:0);
             }
             // more potential for optimization here
         }
@@ -670,10 +661,6 @@
                             if (TRACE_TRANSMITTER) Printer.println("Sending packed message to MidiOutReceiver");
                             midiOutReceiver.sendPackedMidiMessage(packedMessage, timeStamp);
                         }
-                        if (mixerSynthReceiver != null) {
-                            if (TRACE_TRANSMITTER) Printer.println("Sending packed message to MixerSynthReceiver");
-                            mixerSynthReceiver.sendPackedMidiMessage(packedMessage, timeStamp);
-                        }
                     } else {
                         if (TRACE_TRANSMITTER) Printer.println("Sending packed message to "+size+" transmitter's receivers");
                         for (int i = 0; i < size; i++) {
@@ -682,9 +669,6 @@
                                 if (optimizedReceiverCount > 0) {
                                     if (receiver instanceof MidiOutDevice.MidiOutReceiver) {
                                         ((MidiOutDevice.MidiOutReceiver) receiver).sendPackedMidiMessage(packedMessage, timeStamp);
-                                    }
-                                    else if (receiver instanceof MixerSynth.SynthReceiver) {
-                                        ((MixerSynth.SynthReceiver) receiver).sendPackedMidiMessage(packedMessage, timeStamp);
                                     } else {
                                         receiver.send(new FastShortMessage(packedMessage), timeStamp);
                                     }
@@ -739,10 +723,6 @@
                         if (TRACE_TRANSMITTER) Printer.println("Sending MIDI message to MidiOutReceiver");
                         midiOutReceiver.send(message, timeStamp);
                     }
-                    if (mixerSynthReceiver != null) {
-                        if (TRACE_TRANSMITTER) Printer.println("Sending MIDI message to MixerSynthReceiver");
-                        mixerSynthReceiver.send(message, timeStamp);
-                    }
                 } else {
                     if (TRACE_TRANSMITTER) Printer.println("Sending MIDI message to "+size+" transmitter's receivers");
                     for (int i = 0; i < size; i++) {
diff -Nru openjdk.orig/jdk/src/share/classes/com/sun/media/sound/RealTimeSequencer.java openjdk/jdk/src/share/classes/com/sun/media/sound/RealTimeSequencer.java
--- openjdk.orig/jdk/src/share/classes/com/sun/media/sound/RealTimeSequencer.java	2008-11-13 18:27:30.000000000 +0000
+++ openjdk/jdk/src/share/classes/com/sun/media/sound/RealTimeSequencer.java	2008-11-13 18:26:52.000000000 +0000
@@ -56,7 +56,7 @@
 
 
     /** if true, we bridge RMF files over to the old MixerSequencer */
-    private final static boolean RMF = true;
+    private final static boolean RMF = false;
 
     /**
      * Event Dispatcher thread. Should be using a shared event
@@ -145,9 +145,6 @@
     private ArrayList controllerEventListeners = new ArrayList();
 
 
-    /** for RMF media we need the RMF sequencer */
-    private MixerSequencer seqBridge = null;
-
     /** automatic connection support */
     private boolean autoConnect = false;
 
@@ -221,10 +218,6 @@
             }
         }
         if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.close();
-                seqBridge = null;
-            }
             // if previous file was an RMF, but this file is not RMF,
             // then need to call implOpen again!
             if (isOpen() && sequence != null && playThread == null) {
@@ -255,44 +248,6 @@
             int type = fileFormat.getType();
             int resolution = fileFormat.getResolution();
             if (Printer.debug) Printer.debug("Got file with type="+type+" and resolution="+resolution);
-            if (resolution == MidiFileFormat.UNKNOWN_LENGTH) {
-                // seems to be RMF
-                if (seqBridge == null) {
-                    try {
-                        seqBridge = new MixerSequencer();
-                        if (isOpen()) {
-                            seqBridge.open();
-                        }
-                    } catch (MidiUnavailableException mue) {
-                        // uhum, strange situation. Need to cast to InvalidMidiDataException
-                        throw new InvalidMidiDataException(mue.getMessage());
-                    }
-                }
-                seqBridge.setSequence(stream);
-                // propagate state
-                seqBridge.setTempoFactor(getTempoFactor());
-
-                // propagate listeners
-                synchronized(metaEventListeners) {
-                    for (int i = 0 ; i < metaEventListeners.size(); i++) {
-                        seqBridge.addMetaEventListener((MetaEventListener) (metaEventListeners.get(i)));
-                    }
-                }
-                synchronized(controllerEventListeners) {
-                    for (int i = 0 ; i < controllerEventListeners.size(); i++) {
-                        ControllerListElement cve = (ControllerListElement) (controllerEventListeners.get(i));
-                        seqBridge.addControllerEventListener(cve.listener, cve.controllers);
-                    }
-                }
-                // disable the current sequence of RealTimeSequencer
-                //setSequence((Sequence) null); -> will remove bridge again!
-                this.sequence = null;
-                return;
-            }
-            if (seqBridge != null) {
-                seqBridge.close();
-                seqBridge = null;
-            }
         }
 
         Sequence seq = MidiSystem.getSequence(stream); // can throw IOException, InvalidMidiDataException
@@ -305,22 +260,11 @@
 
 
     public Sequence getSequence() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getSequence();
-            }
-        }
         return sequence;
     }
 
 
     public synchronized void start() {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.start();
-                return;
-            }
-        }
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: start()");
 
         // sequencer not open: throw an exception
@@ -346,12 +290,6 @@
 
 
     public synchronized void stop() {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.stop();
-                return;
-            }
-        }
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: stop()");
 
         if (!isOpen()) {
@@ -373,22 +311,11 @@
 
 
     public boolean isRunning() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.isRunning();
-            }
-        }
         return running;
     }
 
 
     public void startRecording() {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.startRecording();
-                return;
-            }
-        }
 
         if (!isOpen()) {
             throw new IllegalStateException("Sequencer not open");
@@ -400,12 +327,6 @@
 
 
     public void stopRecording() {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.stopRecording();
-                return;
-            }
-        }
 
         if (!isOpen()) {
             throw new IllegalStateException("Sequencer not open");
@@ -415,22 +336,11 @@
 
 
     public boolean isRecording() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.isRecording();
-            }
-        }
         return recording;
     }
 
 
     public void recordEnable(Track track, int channel) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.recordEnable(track, channel);
-                return;
-            }
-        }
 
         if (!findTrack(track)) {
             throw new IllegalArgumentException("Track does not exist in the current sequence");
@@ -449,12 +359,6 @@
 
 
     public void recordDisable(Track track) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.recordDisable(track);
-                return;
-            }
-        }
 
         synchronized(recordingTracks) {
             RecordingTrack rc = RecordingTrack.get(recordingTracks, track);
@@ -482,11 +386,6 @@
 
 
     public float getTempoInBPM() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getTempoInBPM();
-            }
-        }
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: getTempoInBPM() ");
 
         return (float) MidiUtils.convertTempo(getTempoInMPQ());
@@ -494,12 +393,6 @@
 
 
     public void setTempoInBPM(float bpm) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setTempoInBPM(bpm);
-                return;
-            }
-        }
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: setTempoInBPM() ");
         if (bpm <= 0) {
             // should throw IllegalArgumentException
@@ -511,11 +404,6 @@
 
 
     public float getTempoInMPQ() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getTempoInMPQ();
-            }
-        }
 
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: getTempoInMPQ() ");
 
@@ -537,12 +425,6 @@
 
 
     public void setTempoInMPQ(float mpq) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setTempoInMPQ(mpq);
-                return;
-            }
-        }
         if (mpq <= 0) {
             // should throw IllegalArgumentException
             mpq = 1.0f;
@@ -564,12 +446,6 @@
 
 
     public void setTempoFactor(float factor) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setTempoFactor(factor);
-                return;
-            }
-        }
         if (factor <= 0) {
             // should throw IllegalArgumentException
             return;
@@ -588,11 +464,6 @@
 
 
     public float getTempoFactor() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getTempoFactor();
-            }
-        }
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: getTempoFactor() ");
 
         if (needCaching()) {
@@ -606,11 +477,6 @@
 
 
     public long getTickLength() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getTickLength();
-            }
-        }
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: getTickLength() ");
 
         if (sequence == null) {
@@ -622,11 +488,6 @@
 
 
     public synchronized long getTickPosition() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getTickPosition();
-            }
-        }
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: getTickPosition() ");
 
         if (getDataPump() == null || sequence == null) {
@@ -638,12 +499,6 @@
 
 
     public synchronized void setTickPosition(long tick) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setTickPosition(tick);
-                return;
-            }
-        }
         if (tick < 0) {
             // should throw IllegalArgumentException
             return;
@@ -667,11 +522,6 @@
 
 
     public long getMicrosecondLength() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getMicrosecondLength();
-            }
-        }
 
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: getMicrosecondLength() ");
 
@@ -684,11 +534,6 @@
 
 
     public long getMicrosecondPosition() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getMicrosecondPosition();
-            }
-        }
 
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: getMicrosecondPosition() ");
 
@@ -702,12 +547,6 @@
 
 
     public void setMicrosecondPosition(long microseconds) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setMicrosecondPosition(microseconds);
-                return;
-            }
-        }
 
         if (microseconds < 0) {
             // should throw IllegalArgumentException
@@ -734,32 +573,16 @@
 
 
     public void setMasterSyncMode(Sequencer.SyncMode sync) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setMasterSyncMode(sync);
-                return;
-            }
-        }
         // not supported
     }
 
 
     public Sequencer.SyncMode getMasterSyncMode() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getMasterSyncMode();
-            }
-        }
         return masterSyncMode;
     }
 
 
     public Sequencer.SyncMode[] getMasterSyncModes() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getMasterSyncModes();
-            }
-        }
 
         Sequencer.SyncMode[] returnedModes = new Sequencer.SyncMode[masterSyncModes.length];
         System.arraycopy(masterSyncModes, 0, returnedModes, 0, masterSyncModes.length);
@@ -768,32 +591,16 @@
 
 
     public void setSlaveSyncMode(Sequencer.SyncMode sync) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setSlaveSyncMode(sync);
-                return;
-            }
-        }
         // not supported
     }
 
 
     public Sequencer.SyncMode getSlaveSyncMode() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getSlaveSyncMode();
-            }
-        }
         return slaveSyncMode;
     }
 
 
     public Sequencer.SyncMode[] getSlaveSyncModes() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getSlaveSyncModes();
-            }
-        }
 
         Sequencer.SyncMode[] returnedModes = new Sequencer.SyncMode[slaveSyncModes.length];
         System.arraycopy(slaveSyncModes, 0, returnedModes, 0, slaveSyncModes.length);
@@ -812,12 +619,6 @@
 
 
     public synchronized void setTrackMute(int track, boolean mute) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setTrackMute(track, mute);
-                return;
-            }
-        }
         int trackCount = getTrackCount();
         if (track < 0 || track >= getTrackCount()) return;
         trackMuted = ensureBoolArraySize(trackMuted, trackCount);
@@ -829,11 +630,6 @@
 
 
     public synchronized boolean getTrackMute(int track) {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getTrackMute(track);
-            }
-        }
         if (track < 0 || track >= getTrackCount()) return false;
         if (trackMuted == null || trackMuted.length <= track) return false;
         return trackMuted[track];
@@ -841,12 +637,6 @@
 
 
     public synchronized void setTrackSolo(int track, boolean solo) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setTrackSolo(track, solo);
-                return;
-            }
-        }
         int trackCount = getTrackCount();
         if (track < 0 || track >= getTrackCount()) return;
         trackSolo = ensureBoolArraySize(trackSolo, trackCount);
@@ -858,11 +648,6 @@
 
 
     public synchronized boolean getTrackSolo(int track) {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getTrackSolo(track);
-            }
-        }
         if (track < 0 || track >= getTrackCount()) return false;
         if (trackSolo == null || trackSolo.length <= track) return false;
         return trackSolo[track];
@@ -870,12 +655,6 @@
 
 
     public boolean addMetaEventListener(MetaEventListener listener) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.addMetaEventListener(listener);
-                // do not return here!
-            }
-        }
         synchronized(metaEventListeners) {
             if (! metaEventListeners.contains(listener)) {
 
@@ -887,12 +666,6 @@
 
 
     public void removeMetaEventListener(MetaEventListener listener) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.removeMetaEventListener(listener);
-                // do not return here!
-            }
-        }
         synchronized(metaEventListeners) {
             int index = metaEventListeners.indexOf(listener);
             if (index >= 0) {
@@ -903,12 +676,6 @@
 
 
     public int[] addControllerEventListener(ControllerEventListener listener, int[] controllers) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.addControllerEventListener(listener, controllers);
-                // do not return here!
-            }
-        }
 
         synchronized(controllerEventListeners) {
 
@@ -938,12 +705,6 @@
 
 
     public int[] removeControllerEventListener(ControllerEventListener listener, int[] controllers) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.removeControllerEventListener(listener, controllers);
-                // do not return here!
-            }
-        }
         synchronized(controllerEventListeners) {
             ControllerListElement cve = null;
             boolean flag = false;
@@ -973,12 +734,6 @@
     ////////////////// LOOPING (added in 1.5) ///////////////////////
 
     public void setLoopStartPoint(long tick) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setLoopStartPoint(tick);
-                return;
-            }
-        }
         if ((tick > getTickLength())
             || ((loopEnd != -1) && (tick > loopEnd))
             || (tick < 0)) {
@@ -988,21 +743,10 @@
     }
 
     public long getLoopStartPoint() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getLoopStartPoint();
-            }
-        }
         return loopStart;
     }
 
     public void setLoopEndPoint(long tick) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setLoopEndPoint(tick);
-                return;
-            }
-        }
         if ((tick > getTickLength())
             || ((loopStart > tick) && (tick != -1))
             || (tick < -1)) {
@@ -1012,21 +756,10 @@
     }
 
     public long getLoopEndPoint() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getLoopEndPoint();
-            }
-        }
         return loopEnd;
     }
 
     public void setLoopCount(int count) {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.setLoopCount(count);
-                return;
-            }
-        }
         if (count != LOOP_CONTINUOUSLY
             && count < 0) {
             throw new IllegalArgumentException("illegal value for loop count: "+count);
@@ -1038,11 +771,6 @@
     }
 
     public int getLoopCount() {
-        if (RMF) {
-            if (seqBridge != null) {
-                return seqBridge.getLoopCount();
-            }
-        }
         return loopCount;
     }
 
@@ -1053,13 +781,6 @@
      */
     protected void implOpen() throws MidiUnavailableException {
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: implOpen()");
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.open();
-                if (Printer.trace) Printer.trace("<< RealTimeSequencer: -> called seqBridge.open");
-                return;
-            }
-        }
 
         //openInternalSynth();
 
@@ -1147,12 +868,7 @@
 
 
     protected synchronized void implClose() {
-        if (RMF) {
-            if (seqBridge != null) {
-                seqBridge.close();
-                // don't return here!
-            }
-        }
+
         if (Printer.trace) Printer.trace(">> RealTimeSequencer: implClose() ");
 
         if (playThread == null) {
@@ -1302,12 +1018,6 @@
     // OVERRIDES OF ABSTRACT MIDI DEVICE METHODS
 
     protected boolean hasReceivers() {
-        if (RMF) {
-            if (seqBridge != null) {
-                //RMF does not allow recording
-                return false;
-            }
-        }
         return true;
     }
 
@@ -1318,12 +1028,6 @@
 
 
     protected boolean hasTransmitters() {
-        if (RMF) {
-            if (seqBridge != null) {
-                //RMF does never allow setting own receivers
-                return false;
-            }
-        }
         return true;
     }
 
