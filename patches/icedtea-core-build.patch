diff -Nru openjdk.orig/corba/make/common/Defs-linux.gmk openjdk/corba/make/common/Defs-linux.gmk
--- openjdk.orig/corba/make/common/Defs-linux.gmk	2008-05-27 22:28:05.000000000 +0100
+++ openjdk/corba/make/common/Defs-linux.gmk	2008-06-22 03:10:05.000000000 +0100
@@ -250,7 +250,12 @@
 # -L to the -ljvm, this is because -ljava depends on -ljvm, whereas
 # the library itself should not.
 #
-VM_NAME         = server
+VM_NAME = $(shell for dir in server client core; do \
+                    if [ -d $(BOOTDIR)/jre/lib/$(LIBARCH)/$$dir ]; then \
+		      echo $$dir; \
+		      break; \
+		    fi; \
+		  done)
 JVMLIB          = -L$(BOOTDIR)/jre/lib/$(LIBARCH)/$(VM_NAME) -ljvm
 JAVALIB         = -L$(BOOTDIR)/jre/lib/$(LIBARCH) -ljava $(JVMLIB)
 
diff -Nru openjdk.orig/hotspot/build/linux/makefiles/defs.make openjdk/hotspot/build/linux/makefiles/defs.make
--- openjdk.orig/hotspot/build/linux/makefiles/defs.make	2008-05-27 22:28:29.000000000 +0100
+++ openjdk/hotspot/build/linux/makefiles/defs.make	2008-06-22 03:10:05.000000000 +0100
@@ -97,6 +97,7 @@
 EXPORT_LIST += $(EXPORT_SERVER_DIR)/Xusage.txt
 EXPORT_LIST += $(EXPORT_SERVER_DIR)/libjsig.so
 EXPORT_LIST += $(EXPORT_SERVER_DIR)/libjvm.so
+ifndef ICEDTEA_CORE_BUILD
 ifeq ($(ARCH_DATA_MODEL), 32)
   EXPORT_CLIENT_DIR = $(EXPORT_JRE_LIB_ARCH_DIR)/client
   EXPORT_LIST += $(EXPORT_CLIENT_DIR)/Xusage.txt
@@ -111,3 +112,4 @@
       EXPORT_LIST += $(EXPORT_LIB_DIR)/sa-jdi.jar
     endif
 endif
+endif
diff -Nru openjdk.orig/hotspot/make/Makefile openjdk/hotspot/make/Makefile
--- openjdk.orig/hotspot/make/Makefile	2008-05-27 22:28:29.000000000 +0100
+++ openjdk/hotspot/make/Makefile	2008-06-22 03:10:05.000000000 +0100
@@ -91,6 +91,15 @@
 all_debug:     jvmg jvmg1 jvmgkernel docs export_debug
 all_optimized: optimized optimized1 optimizedkernel docs export_optimized
 
+# Core (non-compiler) targets made available with this Makefile
+CORE_VM_TARGETS=productcore fastdebugcore optimizedcore jvmgcore
+
+allcore:           all_productcore all_fastdebugcore
+all_productcore:   productcore docs export_product
+all_fastdebugcore: fastdebugcore docs export_fastdebug
+all_debugcore:     jvmgcore docs export_debug
+all_optimizedcore: optimizedcore docs export_optimized
+
 # Do everything
 world:         all create_jdk
 
@@ -113,6 +122,10 @@
 	$(CD) $(GAMMADIR)/make; \
 	$(MAKE) VM_TARGET=$@ generic_build2 $(ALT_OUT)
 
+$(CORE_VM_TARGETS):
+	$(CD) $(GAMMADIR)/make; \
+	$(MAKE) VM_TARGET=$@ generic_buildcore $(ALT_OUT)
+
 $(KERNEL_VM_TARGETS):
 	$(CD) $(GAMMADIR)/make; \
 	$(MAKE) VM_TARGET=$@ generic_buildkernel $(ALT_OUT)
@@ -159,6 +172,12 @@
 		      $(MAKE_ARGS) $(VM_TARGET)
 endif
 
+generic_buildcore:
+	$(MKDIR) -p $(OUTPUTDIR)
+	$(CD) $(OUTPUTDIR); \
+		$(MAKE) -f $(ABS_OS_MAKEFILE) \
+			$(MAKE_ARGS) $(VM_TARGET)
+
 generic_buildkernel:
 	$(MKDIR) -p $(OUTPUTDIR)
 ifeq ($(OSNAME),windows)
@@ -205,13 +224,21 @@
 XUSAGE=$(HS_SRC_DIR)/share/vm/Xusage.txt
 DOCS_DIR=$(OUTPUTDIR)/$(VM_PLATFORM)_docs
 C1_BASE_DIR=$(OUTPUTDIR)/$(VM_PLATFORM)_compiler1
+ifdef ICEDTEA_CORE_BUILD
+C2_BASE_DIR=$(OUTPUTDIR)/$(VM_PLATFORM)_core
+else
 C2_BASE_DIR=$(OUTPUTDIR)/$(VM_PLATFORM)_compiler2
+endif
 KERNEL_BASE_DIR=$(OUTPUTDIR)/$(VM_PLATFORM)_kernel
 C1_DIR=$(C1_BASE_DIR)/$(VM_SUBDIR)
 C2_DIR=$(C2_BASE_DIR)/$(VM_SUBDIR)
 KERNEL_DIR=$(KERNEL_BASE_DIR)/$(VM_SUBDIR)
 
 # Misc files and generated files need to come from C1 or C2 area
+ifdef ICEDTEA_CORE_BUILD
+  MISC_DIR=$(C2_DIR)
+  GEN_DIR=$(C2_BASE_DIR)/generated
+else
 ifeq ($(ARCH_DATA_MODEL), 32)
   MISC_DIR=$(C1_DIR)
   GEN_DIR=$(C1_BASE_DIR)/generated
@@ -219,6 +246,7 @@
   MISC_DIR=$(C2_DIR)
   GEN_DIR=$(C2_BASE_DIR)/generated
 endif
+endif
 
 # Bin files (windows)
 ifeq ($(OSNAME),windows)
diff -Nru openjdk.orig/hotspot/src/share/vm/runtime/vm_version.cpp openjdk/hotspot/src/share/vm/runtime/vm_version.cpp
--- openjdk.orig/hotspot/src/share/vm/runtime/vm_version.cpp	2008-05-27 22:28:30.000000000 +0100
+++ openjdk/hotspot/src/share/vm/runtime/vm_version.cpp	2008-06-22 03:10:05.000000000 +0100
@@ -94,8 +94,12 @@
 #ifdef TIERED
   #define VMTYPE "Server"
 #else
-  #define VMTYPE COMPILER1_PRESENT("Client")   \
-                 COMPILER2_PRESENT("Server")
+#if defined(COMPILER1) || defined(COMPILER2)
+   #define VMTYPE COMPILER1_PRESENT("Client")   \
+                  COMPILER2_PRESENT("Server")
+#else
+  #define VMTYPE "Core"
+#endif // COMPILER1 || COMPILER2
 #endif // TIERED
 #endif // KERNEL
 
diff -Nru openjdk.orig/hotspot/src/share/vm/runtime/vm_version.cpp.orig openjdk/hotspot/src/share/vm/runtime/vm_version.cpp.orig
--- openjdk.orig/hotspot/src/share/vm/runtime/vm_version.cpp.orig	1970-01-01 01:00:00.000000000 +0100
+++ openjdk/hotspot/src/share/vm/runtime/vm_version.cpp.orig	2008-05-27 22:28:30.000000000 +0100
@@ -0,0 +1,254 @@
+/*
+ * Copyright 1998-2007 Sun Microsystems, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
+ * CA 95054 USA or visit www.sun.com if you need additional information or
+ * have any questions.
+ *
+ */
+
+# include "incls/_precompiled.incl"
+# include "incls/_vm_version.cpp.incl"
+
+const char* Abstract_VM_Version::_s_vm_release = Abstract_VM_Version::vm_release();
+const char* Abstract_VM_Version::_s_internal_vm_info_string = Abstract_VM_Version::internal_vm_info_string();
+bool Abstract_VM_Version::_supports_cx8 = false;
+unsigned int Abstract_VM_Version::_logical_processors_per_package = 1U;
+
+#ifndef HOTSPOT_RELEASE_VERSION
+  #error HOTSPOT_RELEASE_VERSION must be defined
+#endif
+#ifndef JRE_RELEASE_VERSION
+  #error JRE_RELEASE_VERSION must be defined
+#endif
+#ifndef HOTSPOT_BUILD_TARGET
+  #error HOTSPOT_BUILD_TARGET must be defined
+#endif
+
+#ifdef PRODUCT
+  #define VM_RELEASE HOTSPOT_RELEASE_VERSION
+#else
+  #define VM_RELEASE HOTSPOT_RELEASE_VERSION "-" HOTSPOT_BUILD_TARGET
+#endif
+
+// HOTSPOT_RELEASE_VERSION must follow the release version naming convention
+// <major_ver>.<minor_ver>-b<nn>[-<identifier>][-<debug_target>]
+int Abstract_VM_Version::_vm_major_version = 0;
+int Abstract_VM_Version::_vm_minor_version = 0;
+int Abstract_VM_Version::_vm_build_number = 0;
+bool Abstract_VM_Version::_initialized = false;
+int Abstract_VM_Version::_parallel_worker_threads = 0;
+bool Abstract_VM_Version::_parallel_worker_threads_initialized = false;
+
+void Abstract_VM_Version::initialize() {
+  if (_initialized) {
+    return;
+  }
+  char* vm_version = os::strdup(HOTSPOT_RELEASE_VERSION);
+
+  // Expecting the next vm_version format:
+  // <major_ver>.<minor_ver>-b<nn>[-<identifier>]
+  char* vm_major_ver = vm_version;
+  assert(isdigit(vm_major_ver[0]),"wrong vm major version number");
+  char* vm_minor_ver = strchr(vm_major_ver, '.');
+  assert(vm_minor_ver != NULL && isdigit(vm_minor_ver[1]),"wrong vm minor version number");
+  vm_minor_ver[0] = '\0'; // terminate vm_major_ver
+  vm_minor_ver += 1;
+  char* vm_build_num = strchr(vm_minor_ver, '-');
+  assert(vm_build_num != NULL && vm_build_num[1] == 'b' && isdigit(vm_build_num[2]),"wrong vm build number");
+  vm_build_num[0] = '\0'; // terminate vm_minor_ver
+  vm_build_num += 2;
+
+  _vm_major_version = atoi(vm_major_ver);
+  _vm_minor_version = atoi(vm_minor_ver);
+  _vm_build_number  = atoi(vm_build_num);
+
+  os::free(vm_version);
+  _initialized = true;
+}
+
+#if defined(_LP64)
+  #define VMLP "64-Bit "
+#else
+  #define VMLP ""
+#endif
+
+#ifdef KERNEL
+  #define VMTYPE "Kernel"
+#else // KERNEL
+#ifdef TIERED
+  #define VMTYPE "Server"
+#else
+  #define VMTYPE COMPILER1_PRESENT("Client")   \
+                 COMPILER2_PRESENT("Server")
+#endif // TIERED
+#endif // KERNEL
+
+#ifndef HOTSPOT_VM_DISTRO
+  #error HOTSPOT_VM_DISTRO must be defined
+#endif
+#define VMNAME HOTSPOT_VM_DISTRO " " VMLP VMTYPE " VM"
+
+const char* Abstract_VM_Version::vm_name() {
+  return VMNAME;
+}
+
+
+const char* Abstract_VM_Version::vm_vendor() {
+#ifdef VENDOR
+  return XSTR(VENDOR);
+#else
+  return "Sun Microsystems Inc.";
+#endif
+}
+
+
+const char* Abstract_VM_Version::vm_info_string() {
+  switch (Arguments::mode()) {
+    case Arguments::_int:
+      return UseSharedSpaces ? "interpreted mode, sharing" : "interpreted mode";
+    case Arguments::_mixed:
+      return UseSharedSpaces ? "mixed mode, sharing"       :  "mixed mode";
+    case Arguments::_comp:
+      return UseSharedSpaces ? "compiled mode, sharing"    : "compiled mode";
+  };
+  ShouldNotReachHere();
+  return "";
+}
+
+// NOTE: do *not* use stringStream. this function is called by
+//       fatal error handler. if the crash is in native thread,
+//       stringStream cannot get resource allocated and will SEGV.
+const char* Abstract_VM_Version::vm_release() {
+  return VM_RELEASE;
+}
+
+#define OS       LINUX_ONLY("linux")             \
+                 WINDOWS_ONLY("windows")         \
+                 SOLARIS_ONLY("solaris")
+
+#define CPU      IA32_ONLY("x86")                \
+                 IA64_ONLY("ia64")               \
+                 AMD64_ONLY("amd64")             \
+                 SPARC_ONLY("sparc")
+
+const char *Abstract_VM_Version::vm_platform_string() {
+  return OS "-" CPU;
+}
+
+const char* Abstract_VM_Version::internal_vm_info_string() {
+  #ifndef HOTSPOT_BUILD_USER
+    #define HOTSPOT_BUILD_USER unknown
+  #endif
+
+  #ifndef HOTSPOT_BUILD_COMPILER
+    #ifdef _MSC_VER
+      #if   _MSC_VER == 1100
+        #define HOTSPOT_BUILD_COMPILER "MS VC++ 5.0"
+      #elif _MSC_VER == 1200
+        #define HOTSPOT_BUILD_COMPILER "MS VC++ 6.0"
+      #elif _MSC_VER == 1310
+        #define HOTSPOT_BUILD_COMPILER "MS VC++ 7.1"
+      #elif _MSC_VER == 1400
+        #define HOTSPOT_BUILD_COMPILER "MS VC++ 8.0"
+      #else
+        #define HOTSPOT_BUILD_COMPILER "unknown MS VC++:" XSTR(_MSC_VER)
+      #endif
+    #elif defined(__SUNPRO_CC)
+      #if   __SUNPRO_CC == 0x420
+        #define HOTSPOT_BUILD_COMPILER "Workshop 4.2"
+      #elif __SUNPRO_CC == 0x500
+        #define HOTSPOT_BUILD_COMPILER "Workshop 5.0 compat=" XSTR(__SUNPRO_CC_COMPAT)
+      #elif __SUNPRO_CC == 0x520
+        #define HOTSPOT_BUILD_COMPILER "Workshop 5.2 compat=" XSTR(__SUNPRO_CC_COMPAT)
+      #elif __SUNPRO_CC == 0x580
+        #define HOTSPOT_BUILD_COMPILER "Workshop 5.8"
+      #elif __SUNPRO_CC == 0x590
+        #define HOTSPOT_BUILD_COMPILER "Workshop 5.9"
+      #else
+        #define HOTSPOT_BUILD_COMPILER "unknown Workshop:" XSTR(__SUNPRO_CC)
+      #endif
+    #elif defined(__GNUC__)
+        #define HOTSPOT_BUILD_COMPILER "gcc " __VERSION__
+    #else
+      #define HOTSPOT_BUILD_COMPILER "unknown compiler"
+    #endif
+  #endif
+
+
+  return VMNAME " (" VM_RELEASE ") for " OS "-" CPU
+         " JRE (" JRE_RELEASE_VERSION "), built on " __DATE__ " " __TIME__
+         " by " XSTR(HOTSPOT_BUILD_USER) " with " HOTSPOT_BUILD_COMPILER;
+}
+
+unsigned int Abstract_VM_Version::jvm_version() {
+  return ((Abstract_VM_Version::vm_major_version() & 0xFF) << 24) |
+         ((Abstract_VM_Version::vm_minor_version() & 0xFF) << 16) |
+         (Abstract_VM_Version::vm_build_number() & 0xFF);
+}
+
+
+void VM_Version_init() {
+  VM_Version::initialize();
+
+#ifndef PRODUCT
+  if (PrintMiscellaneous && Verbose) {
+    os::print_cpu_info(tty);
+  }
+#endif
+}
+
+unsigned int Abstract_VM_Version::nof_parallel_worker_threads(
+                                                      unsigned int num,
+                                                      unsigned int den,
+                                                      unsigned int switch_pt) {
+  if (FLAG_IS_DEFAULT(ParallelGCThreads)) {
+    assert(ParallelGCThreads == 0, "Default ParallelGCThreads is not 0");
+    // For very large machines, there are diminishing returns
+    // for large numbers of worker threads.  Instead of
+    // hogging the whole system, use a fraction of the workers for every
+    // processor after the first 8.  For example, on a 72 cpu machine
+    // and a chosen fraction of 5/8
+    // use 8 + (72 - 8) * (5/8) == 48 worker threads.
+    unsigned int ncpus = (unsigned int) os::active_processor_count();
+    return (ncpus <= switch_pt) ?
+           ncpus :
+          (switch_pt + ((ncpus - switch_pt) * num) / den);
+  } else {
+    return ParallelGCThreads;
+  }
+}
+
+unsigned int Abstract_VM_Version::calc_parallel_worker_threads() {
+  return nof_parallel_worker_threads(5, 8, 8);
+}
+
+
+// Does not set the _initialized flag since it is
+// a global flag.
+unsigned int Abstract_VM_Version::parallel_worker_threads() {
+  if (!_parallel_worker_threads_initialized) {
+    if (FLAG_IS_DEFAULT(ParallelGCThreads)) {
+      _parallel_worker_threads = VM_Version::calc_parallel_worker_threads();
+    } else {
+      _parallel_worker_threads = ParallelGCThreads;
+    }
+    _parallel_worker_threads_initialized = true;
+  }
+  return _parallel_worker_threads;
+}
diff -Nru openjdk.orig/jdk/make/common/Defs-linux.gmk openjdk/jdk/make/common/Defs-linux.gmk
--- openjdk.orig/jdk/make/common/Defs-linux.gmk	2008-06-22 03:01:01.000000000 +0100
+++ openjdk/jdk/make/common/Defs-linux.gmk	2008-06-22 03:10:05.000000000 +0100
@@ -258,7 +258,12 @@
 # -L to the -ljvm, this is because -ljava depends on -ljvm, whereas
 # the library itself should not.
 #
-VM_NAME         = server
+VM_NAME = $(shell for dir in server client core; do \
+                    if [ -d $(LIBDIR)/$(LIBARCH)/$$dir ]; then \
+		      echo $$dir; \
+		      break; \
+		    fi; \
+		  done)
 JVMLIB          = -L$(LIBDIR)/$(LIBARCH)/$(VM_NAME) -ljvm
 JAVALIB         = -ljava $(JVMLIB)
 
diff -Nru openjdk.orig/jdk/make/java/redist/Makefile openjdk/jdk/make/java/redist/Makefile
--- openjdk.orig/jdk/make/java/redist/Makefile	2008-05-27 22:30:14.000000000 +0100
+++ openjdk/jdk/make/java/redist/Makefile	2008-06-22 03:10:05.000000000 +0100
@@ -95,10 +95,12 @@
 endif # INCLUDE_SA
 
 # Hotspot client is only available on 32-bit builds
+ifndef ICEDTEA_CORE_BUILD
 ifeq ($(ARCH_DATA_MODEL), 32)
   IMPORT_LIST += $(LIB_LOCATION)/$(CLIENT_LOCATION)/$(JVM_NAME) \
                  $(LIB_LOCATION)/$(CLIENT_LOCATION)/Xusage.txt
 endif
+endif
 
 ifeq ($(PLATFORM), windows)
 #  Windows     vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv  Windows
@@ -158,6 +160,7 @@
   IMPORT_LIST += $(LIB_LOCATION)/$(SERVER_LOCATION)/$(JVMDB_NAME)
 endif 
 
+ifndef ICEDTEA_CORE_BUILD
 ifeq ($(ARCH_DATA_MODEL), 32)
 
 IMPORT_LIST += $(LIB_LOCATION)/$(CLIENT_LOCATION)/$(LIBJSIG_NAME)
@@ -188,6 +191,8 @@
 
 endif # 32bit
 
+endif # ICEDTEA_CORE_BUILD
+
 #  NOT Windows ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ NOT Windows
 
 endif # PLATFORM
diff -Nru openjdk.orig/make/hotspot-rules.gmk openjdk/make/hotspot-rules.gmk
--- openjdk.orig/make/hotspot-rules.gmk	2008-05-27 22:27:57.000000000 +0100
+++ openjdk/make/hotspot-rules.gmk	2008-06-22 03:10:05.000000000 +0100
@@ -72,6 +72,10 @@
   HOTSPOT_TARGET = all_fastdebug
 endif
 
+ifdef ICEDTEA_CORE_BUILD
+  HOTSPOT_TARGET := $(HOTSPOT_TARGET)core
+endif
+
 HOTSPOT_BUILD_ARGUMENTS += $(COMMON_BUILD_ARGUMENTS)
 HOTSPOT_BUILD_ARGUMENTS += ALT_OUTPUTDIR=$(HOTSPOT_OUTPUTDIR)
 HOTSPOT_BUILD_ARGUMENTS += ALT_EXPORT_PATH=$(HOTSPOT_EXPORT_PATH)
