--- openjdk.old/jdk/make/common/shared/Defs.gmk	2007-09-13 03:52:42.000000000 -0400
+++ openjdk/jdk/make/common/shared/Defs.gmk	2007-09-18 16:24:59.000000000 -0400
@@ -194,13 +194,13 @@
 
 # Default names
 LAUNCHER_NAME = java
-PRODUCT_NAME = Java(TM)
+PRODUCT_NAME = IcedTea
 PRODUCT_SUFFIX = SE Runtime Environment
 COMPANY_NAME = Sun Microsystems, Inc.
 
 ifdef OPENJDK
-  LAUNCHER_NAME = openjdk
-  PRODUCT_NAME = OpenJDK
+  LAUNCHER_NAME = java
+  PRODUCT_NAME = IcedTea
   PRODUCT_SUFFIX = Runtime Environment
   COMPANY_NAME =
 endif
@@ -258,12 +258,7 @@
 JDK_UNDERSCORE_VERSION =  $(subst .,_,$(JDK_VERSION))
 JDK_MKTG_UNDERSCORE_VERSION =  $(subst .,_,$(JDK_MKTG_VERSION))
 
-# RELEASE is JDK_VERSION and -MILESTONE if MILESTONE is set
-ifneq ($(MILESTONE),fcs)
-  RELEASE      = $(JDK_VERSION)-$(MILESTONE)$(BUILD_VARIANT_RELEASE)
-else
-  RELEASE      = $(JDK_VERSION)$(BUILD_VARIANT_RELEASE)
-endif
+RELEASE      = $(JDK_VERSION)$(BUILD_VARIANT_RELEASE)
 
 # FULL_VERSION is RELEASE and -BUILD_NUMBER if BUILD_NUMBER is set
 ifdef BUILD_NUMBER
--- openjdk.old/hotspot/build/windows/projectfiles/common/Makefile	2007-09-27 22:30:19.000000000 -0400
+++ openjdk/hotspot/build/windows/projectfiles/common/Makefile	2007-09-28 11:07:50.000000000 -0400
@@ -123,7 +123,7 @@
 !if exists($(HOTSPOTWORKSPACE)\src\closed)
 HOTSPOT_VM_DISTRO="Java HotSpot(TM)"
 !else
-HOTSPOT_VM_DISTRO="OpenJDK"
+HOTSPOT_VM_DISTRO="IcedTea"
 !endif
 !endif
 
--- openjdk.old/hotspot/src/share/vm/runtime/arguments.cpp	2007-12-10 15:46:40.000000000 -0500
+++ openjdk/hotspot/src/share/vm/runtime/arguments.cpp	2007-12-19 09:41:41.000000000 -0500
@@ -28,7 +28,7 @@
 #include "incls/_precompiled.incl"
 #include "incls/_arguments.cpp.incl"
 
-#define DEFAULT_VENDOR_URL_BUG "http://java.sun.com/webapps/bugreport/crash.jsp"
+#define DEFAULT_VENDOR_URL_BUG "http://icedtea.classpath.org/bugzilla"
 #define DEFAULT_JAVA_LAUNCHER  "generic"
 
 char**  Arguments::_jvm_flags_array             = NULL;
--- openjdkold/hotspot/build/linux/makefiles/vm.make	2008-02-12 04:14:13.000000000 -0500
+++ openjdk/hotspot/build/linux/makefiles/vm.make	2008-02-15 14:46:59.000000000 -0500
@@ -98,7 +98,7 @@
   ifeq ($(CLOSED_DIR_EXISTS), true)
     VM_DISTRO = -DHOTSPOT_VM_DISTRO="\"Java HotSpot(TM)\""
   else
-    VM_DISTRO = -DHOTSPOT_VM_DISTRO="\"OpenJDK\""
+    VM_DISTRO = -DHOTSPOT_VM_DISTRO="\"IcedTea\""
   endif
 endif
 
--- openjdkold/hotspot/build/solaris/makefiles/vm.make	2008-02-12 04:14:14.000000000 -0500
+++ openjdk/solaris/build/linux/makefiles/vm.make	1969-12-31 19:00:00.000000000 -0500
@@ -1,241 +0,0 @@
-#
-# Copyright 1998-2007 Sun Microsystems, Inc.  All Rights Reserved.
-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-#
-# This code is free software; you can redistribute it and/or modify it
-# under the terms of the GNU General Public License version 2 only, as
-# published by the Free Software Foundation.
-#
-# This code is distributed in the hope that it will be useful, but WITHOUT
-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-# version 2 for more details (a copy is included in the LICENSE file that
-# accompanied this code).
-#
-# You should have received a copy of the GNU General Public License version
-# 2 along with this work; if not, write to the Free Software Foundation,
-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
-#
-# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
-# CA 95054 USA or visit www.sun.com if you need additional information or
-# have any questions.
-#  
-#
-
-# Rules to build JVM and related libraries, included from vm.make in the build
-# directory.
-
-# Common build rules.
-MAKEFILES_DIR=$(GAMMADIR)/build/$(Platform_os_family)/makefiles
-include $(MAKEFILES_DIR)/rules.make
-
-default: build
-
-#----------------------------------------------------------------------
-# Defs
-
-GENERATED     = ../generated
-
-# read a generated file defining the set of .o's and the .o .h dependencies
-include $(GENERATED)/Dependencies
-
-# read machine-specific adjustments (%%% should do this via buildtree.make?)
-include $(MAKEFILES_DIR)/$(BUILDARCH).make
-
-# set VPATH so make knows where to look for source files
-# Src_Dirs is everything in src/share/vm/*, plus the right os/*/vm and cpu/*/vm
-# The incls directory contains generated header file lists for inclusion.
-# The adfiles directory contains ad_<arch>.[ch]pp.
-# The jvmtifiles directory contains jvmti*.[ch]pp
-Src_Dirs_V = $(GENERATED)/adfiles $(GENERATED)/jvmtifiles ${Src_Dirs} $(GENERATED)/incls
-VPATH    += $(Src_Dirs_V:%=%:)
-
-# set INCLUDES for C preprocessor
-Src_Dirs_I = $(GENERATED)/adfiles $(GENERATED)/jvmtifiles ${Src_Dirs} $(GENERATED) 
-INCLUDES += $(Src_Dirs_I:%=-I%)
-
-ifeq (${VERSION}, debug)
-  SYMFLAG = -g
-else
-  SYMFLAG =
-endif
-
-# HOTSPOT_RELEASE_VERSION and HOTSPOT_BUILD_VERSION are defined 
-# in $(GAMMADIR)/make/defs.make
-ifeq ($(HOTSPOT_BUILD_VERSION),)
-  BUILD_VERSION = -DHOTSPOT_RELEASE_VERSION="\"$(HOTSPOT_RELEASE_VERSION)\""
-else
-  BUILD_VERSION = -DHOTSPOT_RELEASE_VERSION="\"$(HOTSPOT_RELEASE_VERSION)-$(HOTSPOT_BUILD_VERSION)\""
-endif
-
-# FULL_VERSION is defined in $(GAMMADIR)/make/defs.make
-JRE_RELEASE_VERSION$(JRE_RELEASE_VERSION) = $(FULL_VERSION)
-JRE_VERSION = -DJRE_RELEASE_VERSION="\"$(JRE_RELEASE_VERSION)\""
-
-HOTSPOT_BUILD_TARGET$(HOTSPOT_BUILD_TARGET) = $(TARGET)
-BUILD_TARGET = -DHOTSPOT_BUILD_TARGET="\"$(HOTSPOT_BUILD_TARGET)\""
-
-# set BUILD_USER from system-dependent hints:  $LOGNAME, $(whoami)
-ifndef HOTSPOT_BUILD_USER
-  HOTSPOT_BUILD_USER := $(shell echo $$LOGNAME)
-endif
-ifndef HOTSPOT_BUILD_USER
-  HOTSPOT_BUILD_USER := $(shell whoami)
-endif
-BUILD_USER = -DHOTSPOT_BUILD_USER="\"$(HOTSPOT_BUILD_USER)\""
-
-# Define HOTSPOT_VM_DISTRO if HOTSPOT_VM_DISTRO is set,
-# and if it is not see if we have the src/closed directory
-ifneq ($(HOTSPOT_VM_DISTRO),) 
-  VM_DISTRO = -DHOTSPOT_VM_DISTRO="\"$(HOTSPOT_VM_DISTRO)\""
-else
-  CLOSED_DIR_EXISTS := $(shell              \
-    if [ -d $(GAMMADIR)/src/closed ] ; then \
-      echo true;                            \
-    else                                    \
-      echo false;                           \
-    fi)
-  ifeq ($(CLOSED_DIR_EXISTS), true)
-    VM_DISTRO = -DHOTSPOT_VM_DISTRO="\"Java HotSpot(TM)\""
-  else
-    VM_DISTRO = -DHOTSPOT_VM_DISTRO="\"OpenJDK\""
-  endif
-endif
-
-CPPFLAGS =           \
-  ${SYSDEFS}         \
-  ${INCLUDES}        \
-  ${BUILD_VERSION}   \
-  ${BUILD_TARGET}    \
-  ${BUILD_USER}      \
-  ${JRE_VERSION}     \
-  ${VM_DISTRO}
-
-# CFLAGS_WARN holds compiler options to suppress/enable warnings.
-CFLAGS += $(CFLAGS_WARN)
-
-# Do not use C++ exception handling
-CFLAGS += $(CFLAGS/NOEX)
-
-# Extra flags from gnumake's invocation or environment
-CFLAGS += $(EXTRA_CFLAGS)
-
-# Math Library (libm.so), do not use -lm.
-#    There might be two versions of libm.so on the build system:
-#    libm.so.1 and libm.so.2, and we want libm.so.1.
-#    Depending on the Solaris release being used to build with,
-#    /usr/lib/libm.so could point at a libm.so.2, so we are
-#    explicit here so that the libjvm.so you have built will work on an
-#    older Solaris release that might not have libm.so.2.
-#    This is a critical factor in allowing builds on Solaris 10 or newer
-#    to run on Solaris 8 or 9.
-#
-LIBM=/usr/lib$(ISA_DIR)/libm.so.1
-
-ifeq ("${Platform_compiler}", "sparcWorks")
-# The whole megilla:
-ifeq ($(shell expr $(COMPILER_REV) \>= 5.5), 1)
-# Old Comment: List the libraries in the order the compiler was designed for
-# Not sure what the 'designed for' comment is referring too above.
-#   The order may not be too significant anymore, but I have placed this
-#   older libm before libCrun, just to make sure it's found and used first.
-LIBS += -lsocket -lsched -ldl $(LIBM) -lCrun -lthread -ldoor -lc
-else
-LIBS += -ldl -lthread -lsocket $(LIBM) -lsched -ldoor
-endif
-else
-LIBS += -lsocket -lsched -ldl $(LIBM) -lthread -lc
-endif
-
-# By default, link the *.o into the library, not the executable.
-LINK_INTO$(LINK_INTO) = LIBJVM
-
-JDK_LIBDIR = $(JAVA_HOME)/jre/lib/$(LIBARCH)
-
-#----------------------------------------------------------------------
-# jvm_db & dtrace
-include $(MAKEFILES_DIR)/dtrace.make
-
-#----------------------------------------------------------------------
-# JVM
-
-JVM    = jvm$(G_SUFFIX)
-LIBJVM = lib$(JVM).so
-
-JVM_OBJ_FILES = $(Obj_Files) $(DTRACE_OBJS)
-
-vm_version.o: $(filter-out vm_version.o,$(JVM_OBJ_FILES))
-
-mapfile : $(MAPFILE) $(MAPFILE_DTRACE_OPT)
-	rm -f $@
-	cat $^ > $@
-
-mapfile_reorder : mapfile $(MAPFILE_DTRACE_OPT) $(REORDERFILE)
-	rm -f $@
-	cat $^ > $@
-
-ifeq ($(LINK_INTO),AOUT)
-  LIBJVM.o                 =
-  LIBJVM_MAPFILE           =
-  LIBS_VM                  = $(LIBS)
-else
-  LIBJVM.o                 = $(JVM_OBJ_FILES)
-  LIBJVM_MAPFILE$(LDNOMAP) = mapfile_reorder
-  LFLAGS_VM$(LDNOMAP)      += $(MAPFLAG:FILENAME=$(LIBJVM_MAPFILE))
-  LFLAGS_VM                += $(SONAMEFLAG:SONAME=$(LIBJVM))
-ifndef USE_GCC
-  LIBS_VM                  = $(LIBS)
-else
-  # JVM is statically linked with libgcc[_s] and libstdc++; this is needed to
-  # get around library dependency and compatibility issues. Must use gcc not
-  # g++ to link.
-  LFLAGS_VM                += $(STATIC_LIBGCC)
-  LIBS_VM                  += $(STATIC_STDCXX) $(LIBS)
-endif
-endif
-
-ifdef USE_GCC
-LINK_VM = $(LINK_LIB.c)
-else
-LINK_VM = $(LINK_LIB.CC)
-endif
-# making the library:
-$(LIBJVM): $(LIBJVM.o) $(LIBJVM_MAPFILE) 
-	$(QUIETLY) \
-	case "$(CFLAGS_BROWSE)" in \
-	-sbfast|-xsbfast) \
-	    ;; \
-	*) \
-	    echo Linking vm...;                                                  \
-	    $(LINK_LIB.CC/PRE_HOOK)                                              \
-	    $(LINK_VM) $(LFLAGS_VM) -o $@ $(LIBJVM.o) $(LIBS_VM);                \
-	    $(LINK_LIB.CC/POST_HOOK)                                             \
-	    rm -f $@.1; ln -s $@ $@.1;                                           \
-	    ;; \
-	esac
-
-DEST_JVM = $(JDK_LIBDIR)/$(VM_SUBDIR)/$(LIBJVM)
-
-install_jvm: $(LIBJVM)
-	@echo "Copying $(LIBJVM) to $(DEST_JVM)"
-	$(QUIETLY) cp -f $(LIBJVM) $(DEST_JVM) && echo "Done"
-
-#----------------------------------------------------------------------
-# Other files
-
-# Gamma launcher
-include $(MAKEFILES_DIR)/launcher.make
-
-# Signal interposition library
-include $(MAKEFILES_DIR)/jsig.make
-
-# Serviceability agent
-include $(MAKEFILES_DIR)/saproc.make
-
-#----------------------------------------------------------------------
-
-build: $(LIBJVM) $(LAUNCHER) $(LIBJSIG) $(LIBJVM_DB) $(LIBJVM_DTRACE) checkAndBuildSA dtraceCheck
-
-install: install_jvm install_jsig install_saproc
-
-.PHONY: default build install install_jvm
--- openjdkold/hotspot/build/windows/makefiles/vm.make	2008-02-12 04:14:14.000000000 -0500
+++ openjdk/windows/build/linux/makefiles/vm.make	1969-12-31 19:00:00.000000000 -0500
@@ -1,274 +0,0 @@
-#
-# Copyright 1997-2007 Sun Microsystems, Inc.  All Rights Reserved.
-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-#
-# This code is free software; you can redistribute it and/or modify it
-# under the terms of the GNU General Public License version 2 only, as
-# published by the Free Software Foundation.
-#
-# This code is distributed in the hope that it will be useful, but WITHOUT
-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-# version 2 for more details (a copy is included in the LICENSE file that
-# accompanied this code).
-#
-# You should have received a copy of the GNU General Public License version
-# 2 along with this work; if not, write to the Free Software Foundation,
-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
-#
-# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
-# CA 95054 USA or visit www.sun.com if you need additional information or
-# have any questions.
-#  
-#
-
-# Resource file containing VERSIONINFO
-Res_Files=.\version.res
-
-!ifdef RELEASE 
-!ifdef DEVELOP
-CPP_FLAGS=$(CPP_FLAGS) /D "DEBUG"
-!else
-CPP_FLAGS=$(CPP_FLAGS) /D "PRODUCT"
-!endif
-!else
-CPP_FLAGS=$(CPP_FLAGS) /D "ASSERT"
-!endif
-
-!if "$(Variant)" == "core"
-# No need to define anything, CORE is defined as !COMPILER1 && !COMPILER2
-!endif
-
-!if "$(Variant)" == "kernel"
-CPP_FLAGS=$(CPP_FLAGS) /D "KERNEL"
-!endif
-
-!if "$(Variant)" == "compiler1"
-CPP_FLAGS=$(CPP_FLAGS) /D "COMPILER1"
-!endif
-
-!if "$(Variant)" == "compiler2"
-CPP_FLAGS=$(CPP_FLAGS) /D "COMPILER2"
-!endif
-
-!if "$(Variant)" == "tiered"
-CPP_FLAGS=$(CPP_FLAGS) /D "COMPILER1" /D "COMPILER2"
-!endif
-
-!if "$(BuildUser)" != ""
-CPP_FLAGS=$(CPP_FLAGS) /D "HOTSPOT_BUILD_USER=\"$(BuildUser)\""
-!endif
-
-CPP_FLAGS=$(CPP_FLAGS) /D "HOTSPOT_RELEASE_VERSION=\"$(HS_BUILD_VER)\""
-CPP_FLAGS=$(CPP_FLAGS) /D "JRE_RELEASE_VERSION=\"$(JRE_RELEASE_VER)\""
-CPP_FLAGS=$(CPP_FLAGS) /D "HOTSPOT_BUILD_TARGET=\"$(BUILD_FLAVOR)\""
-
-# Define HOTSPOT_VM_DISTRO if HOTSPOT_VM_DISTRO is set,
-# and if it is not see if we have the src/closed directory
-!if "$(HOTSPOT_VM_DISTRO)" != ""
-CPP_FLAGS=$(CPP_FLAGS) /D "HOTSPOT_VM_DISTRO=\"$(HOTSPOT_VM_DISTRO)\""
-!else
-!if exists($(WorkSpace)\src\closed)
-CPP_FLAGS=$(CPP_FLAGS) /D "HOTSPOT_VM_DISTRO=\"Java HotSpot(TM)\""
-!else
-CPP_FLAGS=$(CPP_FLAGS) /D "HOTSPOT_VM_DISTRO=\"OpenJDK\""
-!endif
-!endif
-
-CPP_FLAGS=$(CPP_FLAGS) /D "WIN32" /D "_WINDOWS" $(CPP_INCLUDE_DIRS)
-
-# Must specify this for sharedRuntimeTrig.cpp
-CPP_FLAGS=$(CPP_FLAGS) /D "VM_LITTLE_ENDIAN"
-
-# Define that so jni.h is on correct side
-CPP_FLAGS=$(CPP_FLAGS) /D "_JNI_IMPLEMENTATION_"
-
-!if "$(ARCH)" == "ia64"
-STACK_SIZE="/STACK:1048576,262144"
-!else
-STACK_SIZE=
-!endif
-
-!if "$(ARCH)" == "ia64"
-# AsyncGetCallTrace is not supported on IA64 yet
-AGCT_EXPORT=
-!else
-AGCT_EXPORT=/export:AsyncGetCallTrace
-!endif
-
-LINK_FLAGS=$(LINK_FLAGS) $(STACK_SIZE) /subsystem:windows /dll /base:0x8000000  \
-  /export:JNI_GetDefaultJavaVMInitArgs /export:JNI_CreateJavaVM    \
-  /export:JNI_GetCreatedJavaVMs /export:jio_snprintf               \
-  /export:jio_printf /export:jio_fprintf                           \
-  /export:jio_vfprintf /export:jio_vsnprintf $(AGCT_EXPORT)        \
-  /export:JVM_GetVersionInfo /export:JVM_GetVersionInfo            \
-  /export:JVM_GetThreadStateNames /export:JVM_GetThreadStateValues \
-  /export:JVM_EnqueueOperation /export:JVM_InitAgentProperties
-
-CPP_INCLUDE_DIRS=\
-  /I "..\generated"                          \
-  /I "..\generated\jvmtifiles"               \
-  /I "$(WorkSpace)\src\share\vm\c1"          \
-  /I "$(WorkSpace)\src\share\vm\compiler"    \
-  /I "$(WorkSpace)\src\share\vm\code"        \
-  /I "$(WorkSpace)\src\share\vm\interpreter" \
-  /I "$(WorkSpace)\src\share\vm\ci"          \
-  /I "$(WorkSpace)\src\share\vm\classfile"   \
-  /I "$(WorkSpace)\src\share\vm\gc_implementation\parallelScavenge"\
-  /I "$(WorkSpace)\src\share\vm\gc_implementation\shared"\
-  /I "$(WorkSpace)\src\share\vm\gc_implementation\parNew"\
-  /I "$(WorkSpace)\src\share\vm\gc_implementation\concurrentMarkSweep"\
-  /I "$(WorkSpace)\src\share\vm\gc_interface"\
-  /I "$(WorkSpace)\src\share\vm\asm"         \
-  /I "$(WorkSpace)\src\share\vm\memory"      \
-  /I "$(WorkSpace)\src\share\vm\oops"        \
-  /I "$(WorkSpace)\src\share\vm\prims"       \
-  /I "$(WorkSpace)\src\share\vm\runtime"     \
-  /I "$(WorkSpace)\src\share\vm\services"    \
-  /I "$(WorkSpace)\src\share\vm\utilities"   \
-  /I "$(WorkSpace)\src\share\vm\libadt"      \
-  /I "$(WorkSpace)\src\share\vm\opto"        \
-  /I "$(WorkSpace)\src\os\win32\vm"          \
-  /I "$(WorkSpace)\src\os_cpu\win32_$(ARCH)\vm" \
-  /I "$(WorkSpace)\src\cpu\$(ARCH)\vm"
-
-CPP_USE_PCH=/Fp"vm.pch" /Yu"incls/_precompiled.incl"
-
-# Where to find the source code for the virtual machine
-VM_PATH=../generated/incls
-VM_PATH=$(VM_PATH);../generated/jvmtifiles
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/c1
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/compiler
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/code
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/interpreter
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/ci
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/classfile
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/gc_implementation/parallelScavenge
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/gc_implementation/shared
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/gc_implementation/parNew
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/gc_implementation/concurrentMarkSweep
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/gc_interface
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/asm
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/memory
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/oops
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/prims
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/runtime
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/services
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/utilities
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/libadt
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/os/win32/vm
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/os_cpu/win32_$(ARCH)/vm
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/cpu/$(ARCH)/vm
-VM_PATH=$(VM_PATH);$(WorkSpace)/src/share/vm/opto
-
-VM_PATH={$(VM_PATH)}
-
-# Special case files not using precompiled header files.
-
-c1_RInfo_$(ARCH).obj: $(WorkSpace)\src\cpu\$(ARCH)\vm\c1_RInfo_$(ARCH).cpp 
-	 $(CPP) $(CPP_FLAGS) /c $(WorkSpace)\src\cpu\$(ARCH)\vm\c1_RInfo_$(ARCH).cpp
-
-os_win32.obj: $(WorkSpace)\src\os\win32\vm\os_win32.cpp
-        $(CPP) $(CPP_FLAGS) /c $(WorkSpace)\src\os\win32\vm\os_win32.cpp
-
-os_win32_$(ARCH).obj: $(WorkSpace)\src\os_cpu\win32_$(ARCH)\vm\os_win32_$(ARCH).cpp
-        $(CPP) $(CPP_FLAGS) /c $(WorkSpace)\src\os_cpu\win32_$(ARCH)\vm\os_win32_$(ARCH).cpp
-
-osThread_win32.obj: $(WorkSpace)\src\os\win32\vm\osThread_win32.cpp
-        $(CPP) $(CPP_FLAGS) /c $(WorkSpace)\src\os\win32\vm\osThread_win32.cpp
-
-conditionVar_win32.obj: $(WorkSpace)\src\os\win32\vm\conditionVar_win32.cpp
-        $(CPP) $(CPP_FLAGS) /c $(WorkSpace)\src\os\win32\vm\conditionVar_win32.cpp
-
-getThread_win32_$(ARCH).obj: $(WorkSpace)\src\os_cpu\win32_$(ARCH)\vm\getThread_win32_$(ARCH).cpp
-        $(CPP) $(CPP_FLAGS) /c $(WorkSpace)\src\os_cpu\win32_$(ARCH)\vm\getThread_win32_$(ARCH).cpp
-
-opcodes.obj: $(WorkSpace)\src\share\vm\opto\opcodes.cpp
-        $(CPP) $(CPP_FLAGS) /c $(WorkSpace)\src\share\vm\opto\opcodes.cpp
-
-# Default rules for the Virtual Machine
-{$(WorkSpace)\src\share\vm\c1}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\compiler}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\code}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\interpreter}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\ci}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\classfile}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\gc_implementation\parallelScavenge}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\gc_implementation\shared}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\gc_implementation\parNew}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\gc_implementation\concurrentMarkSweep}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\gc_interface}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\asm}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\memory}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\oops}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\prims}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\runtime}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\services}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\utilities}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\libadt}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\share\vm\opto}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\os\win32\vm}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-# This guy should remain a single colon rule because
-# otherwise we can't specify the output filename.
-{$(WorkSpace)\src\os\win32\vm}.rc.res:
-        @$(RC) $(RC_FLAGS) /fo"$@" $<
-
-{$(WorkSpace)\src\cpu\$(ARCH)\vm}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{$(WorkSpace)\src\os_cpu\win32_$(ARCH)\vm}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{..\generated\incls}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-{..\generated\jvmtifiles}.cpp.obj::
-        $(CPP) $(CPP_FLAGS) $(CPP_USE_PCH) /c $<
-
-default::
-
-_build_pch_file.obj:
-        @echo #include "incls/_precompiled.incl" > ../generated/_build_pch_file.cpp
-        $(CPP) $(CPP_FLAGS) /Fp"vm.pch" /Yc"incls/_precompiled.incl" /c ../generated/_build_pch_file.cpp
