diff -ru openjdk/hotspot/build/linux/makefiles/gcc.make openjdk/hotspot/build/linux/makefiles/gcc.make
--- openjdk/hotspot/build/linux/makefiles/gcc.make	2008-02-17 15:37:26.000000000 -0500
+++ openjdk/hotspot/build/linux/makefiles/gcc.make	2008-02-17 15:37:58.000000000 -0500
@@ -57,6 +57,7 @@
 
 VM_PICFLAG        = $(VM_PICFLAG/$(LINK_INTO))
 
+CFLAGS += $(LIBFFI_CFLAGS)
 CFLAGS += $(VM_PICFLAG)
 CFLAGS += -fno-rtti
 CFLAGS += -fno-exceptions
diff -ru openjdk-ecj/hotspot/build/linux/makefiles/vm.make openjdk-ecj.new/hotspot/build/linux/makefiles/vm.make
--- openjdk/hotspot/build/linux/makefiles/vm.make	2008-02-29 09:46:55.000000000 -0500
+++ openjdk/hotspot/build/linux/makefiles/vm.make	2008-02-29 09:47:30.000000000 -0500
@@ -177,6 +177,9 @@
 
   LIBS_VM                  += $(LIBS)
 endif
+ifeq ($(SRCARCH), zero)
+LIBS_VM += $(LIBFFI_LIBS)
+endif
 
 LINK_VM = $(LINK_LIB.c)
 
diff -ru openjdk/hotspot/src/share/vm/runtime/icache.cpp openjdk/hotspot/src/share/vm/runtime/icache.cpp
--- openjdk/hotspot/src/share/vm/runtime/icache.cpp	2007-10-30 08:46:35.000000000 +0000
+++ openjdk/hotspot/src/share/vm/runtime/icache.cpp	2008-01-21 15:18:48.000000000 +0000
@@ -81,6 +81,7 @@
 }
 
 void AbstractICache::invalidate_range(address start, int nbytes) {
+#ifndef ZERO
   static bool firstTime = true;
   if (firstTime) {
     guarantee(start == CAST_FROM_FN_PTR(address, _flush_icache_stub),
@@ -100,6 +101,7 @@
   }
   call_flush_stub(start, round_to(nbytes, ICache::line_size) >>
                          ICache::log2_line_size);
+#endif // ZERO
 }
 
 // For init.cpp
diff -ru openjdk/hotspot/src/share/vm/runtime/jniHandles.hpp openjdk/hotspot/src/share/vm/runtime/jniHandles.hpp
--- openjdk/hotspot/src/share/vm/runtime/jniHandles.hpp	2007-10-30 08:46:35.000000000 +0000
+++ openjdk/hotspot/src/share/vm/runtime/jniHandles.hpp	2008-01-24 13:26:36.000000000 +0000
@@ -129,9 +129,17 @@
   // Fill block with bad_handle values
   void zap();
 
+#ifdef ZERO
+ protected:
+  friend class CppInterpreter;
+#endif // ZERO
+
   // No more handles in the both the current and following blocks
   void clear() { _top = 0; }
 
+#ifdef ZERO
+ private:
+#endif // ZERO
   // Free list computation
   void rebuild_free_list();
 
diff -ru openjdk/hotspot/src/share/vm/utilities/vmError.cpp openjdk/hotspot/src/share/vm/utilities/vmError.cpp
--- openjdk/hotspot/src/share/vm/utilities/vmError.cpp	2008-01-24 13:17:27.000000000 +0000
+++ openjdk/hotspot/src/share/vm/utilities/vmError.cpp	2008-01-24 13:21:20.000000000 +0000
@@ -27,6 +27,11 @@
 
 # include "incls/_precompiled.incl"
 # include "incls/_vmError.cpp.incl"
+
+# ifdef ZERO
+# include <interpreterRuntime.hpp>
+# include <stackPrinter_zero.hpp>
+# endif //
 
 // List of environment variables that should be reported in error log file.
 const char *env_list[] = {
@@ -395,6 +400,7 @@
        st->cr();
      }
 
+#ifndef ZERO
   STEP(110, "(printing stack bounds)" )
 
      if (_verbose) {
@@ -452,11 +453,16 @@
           st->cr();
        }
      }
+#endif // !ZERO
 
   STEP(130, "(printing Java stack)" )
 
      if (_verbose && _thread && _thread->is_Java_thread()) {
        JavaThread* jt = (JavaThread*)_thread;
+#ifdef ZERO
+       st->print_cr("Java stack:");
+       JavaStackPrinter(st, buf, sizeof(buf)).print(jt);
+#else
        if (jt->has_last_Java_frame()) {
          st->print_cr("Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)");
          for(StackFrameStream sfs(jt); !sfs.is_done(); sfs.next()) {
@@ -464,6 +475,7 @@
            st->cr();
          }
        }
+#endif // ZERO
      }
 
   STEP(140, "(printing VM operation)" )
diff -r 8e9761ee6dd6 openjdk/hotspot/build/linux/makefiles/buildtree.make
--- openjdk/hotspot/build/linux/makefiles/buildtree.make	Mon Feb 18 11:56:36 2008 +0000
+++ openjdk/hotspot/build/linux/makefiles/buildtree.make	Mon Feb 18 12:03:06 2008 +0000
@@ -60,7 +60,11 @@ QUIETLY$(MAKE_VERBOSE)	= @
 # For now, until the compiler is less wobbly:
 TESTFLAGS	= -Xbatch -showversion
 
+ifeq ($(ARCH), zero)
+PLATFORM_FILE	= $(GAMMADIR)/build/$(OS_FAMILY)/platform_$(BUILDARCH)
+else
 PLATFORM_FILE	= $(GAMMADIR)/build/$(OS_FAMILY)/platform_$(ARCH)
+endif
 
 ifdef FORCE_TIERED
 ifeq		($(VARIANT),tiered)
